# Top level entry required to mark this as a global AnalyzerConfig file
is_global = true

# .NET diagnostics overrides
dotnet_diagnostic.AsyncFixer01.severity = none       # Unnecessary async/await usage [Justification: Methods should be in the stack-trace.]

dotnet_diagnostic.CA1012.severity   = none       # Abstract types should not have public constructors [Justification: Similar to S3442.]
dotnet_diagnostic.CA1019.severity   = none       # Define accessors for attribute arguments [Justification: Similar to S3993.]
dotnet_diagnostic.CA1064.severity   = none       # Exceptions should be public [Justification: Similar to S3871.]
dotnet_diagnostic.CA1860.severity   = none       # Avoid using 'Enumerable.Any()' extension method [Justification: Any() is easier to read.]
dotnet_diagnostic.CA2000.severity   = none       # Dispose objects before losing scope [Justification: Similar to IDISP001]
dotnet_diagnostic.CA2201.severity   = none       # Do not raise reserved exception types [Justification: Similar to S122.]

dotnet_diagnostic.CA1008.severity   = warning    # Enums should have zero value
dotnet_diagnostic.CA1044.severity   = warning    # Properties should not be write only
dotnet_diagnostic.CA1045.severity   = warning    # Do not pass types by reference
dotnet_diagnostic.CA1063.severity   = warning    # Implement IDisposable Correctly
dotnet_diagnostic.CA1069.severity   = warning    # Enums values should not be duplicated
dotnet_diagnostic.CA1806.severity   = warning    # Do not ignore method results
dotnet_diagnostic.CA1816.severity   = warning    # Dispose methods should call SuppressFinalize
dotnet_diagnostic.CA1822.severity   = warning    # Mark members as static
dotnet_diagnostic.CA1825.severity   = warning    # Avoid zero-length array allocations
dotnet_diagnostic.CA1827.severity   = warning    # Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1828.severity   = warning    # Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1854.severity   = warning    # Prefer the 'IDictionary.TryGetValue(TKey, out TValue)' method
dotnet_diagnostic.CA1864.severity   = warning    # Prefer the 'IDictionary.TryAdd(TKey, TValue)' method
dotnet_diagnostic.CA1869.severity   = warning    # Cache and reuse 'JsonSerializerOptions' instances
dotnet_diagnostic.CA2016.severity   = warning    # Forward the 'CancellationToken' parameter to methods
dotnet_diagnostic.CA2211.severity   = warning    # Non-constant fields should not be visible
dotnet_diagnostic.CA2213.severity   = warning    # Disposable fields should be disposed
dotnet_diagnostic.CA2231.severity   = warning    # Overload operator equals on overriding value type Equals
dotnet_diagnostic.CA2254.severity   = warning    # Template should be a static expression

dotnet_diagnostic.NUnit1001.severity = none       # The individual arguments provided by a TestCaseAttribute must match the type of the corresponding parameter of the method [Justification: Multiple false positives occurred.]

dotnet_diagnostic.Proj0241.severity = none       # Enable package baseline validation [Justification: Baseline validation is not supported on Azure DevOps.]

dotnet_diagnostic.QW0001.severity   = none       # Use a testable Time Provider [Justification: Similar to S6354.]

dotnet_diagnostic.QW0003.severity   = warning    # Decorate pure functions [Justification: [Pure] annotations are useful for library packages.]

dotnet_diagnostic.S100.severity     = none       # Methods and properties should be named in PascalCase [Justification: Sometimes underscores increase readability.]
dotnet_diagnostic.S101.severity     = none       # Types should be named in PascalCase [Justification: This is not written in stone.]
dotnet_diagnostic.S1694.severity    = none       # An abstract class should have both abstract and concrete methods [Justification: An abstract class can act as a factory.]
dotnet_diagnostic.S2156.severity    = none       # "sealed" classes should not have "protected" members [Justification: Similar to CS0628.]
dotnet_diagnostic.S3376.severity    = none       # Attribute, EventArgs, and Exception type names should end with the type being extended [Justification: Exception names should not need the Exception suffix.]
dotnet_diagnostic.S3925.severity    = none       # "ISerializable" should be implemented correctly [Justification: Intended for now obsolete binary serialization.]
dotnet_diagnostic.S6608.severity    = none       # Prefer indexing instead of "Enumerable" methods on types implementing "IList" [Justification: First() is easier to understand then [0].]

dotnet_diagnostic.S2148.severity    = suggestion # Underscores should be used to make large numbers readable

dotnet_diagnostic.S105.severity     = warning    # Tabulation characters should not be used
dotnet_diagnostic.S107.severity     = warning    # Methods should not have too many parameters
dotnet_diagnostic.S113.severity     = warning    # Files should end with a newline
dotnet_diagnostic.S1479.severity    = warning    # "switch" statements with many "case" clauses should have only one statement
dotnet_diagnostic.S1858.severity    = warning    # "ToString()" calls should not be redundant
dotnet_diagnostic.S2302.severity    = warning    # "nameof" should be used
dotnet_diagnostic.S2333.severity    = warning    # Redundant modifiers should not be used
dotnet_diagnostic.S2342.severity    = warning    # Enumeration types should comply with a naming convention
dotnet_diagnostic.S2436.severity    = warning    # Types and methods should not have too many generic parameters
dotnet_diagnostic.S3215.severity    = warning    # "interface" instances should not be cast to concrete types
dotnet_diagnostic.S3257.severity    = warning    # Declarations and initializations should be as concise as possible
dotnet_diagnostic.S3353.severity    = warning    # Unchanged variables should be marked as "const"
dotnet_diagnostic.S3717.severity    = warning    # Track use of "NotImplementedException" [Justification: Equivalent to TODO.]
dotnet_diagnostic.S3776.severity    = warning    # Cognitive Complexity of methods should not be too high
dotnet_diagnostic.S4026.severity    = warning    # Assemblies should be marked with "NeutralResourcesLanguageAttribute"
dotnet_diagnostic.S4457.severity    = warning    # Parameter validation in "async"/"await" methods should be wrapped
dotnet_diagnostic.S4462.severity    = warning    # Calls to "async" methods should not be blocking
dotnet_diagnostic.S6354.severity    = warning    # Use a testable date/time provider
dotnet_diagnostic.S6513.severity    = warning    # "ExcludeFromCodeCoverage" attributes should include a justification

dotnet_diagnostic.SA1001.severity   = none       # Commas should be spaced correctly
dotnet_diagnostic.SA1101.severity   = none       # Prefix local calls with this
dotnet_diagnostic.SA1127.severity   = none       # Generic type constraints should be on their own line
dotnet_diagnostic.SA1128.severity   = none       # Put constructor initializers on their own line
dotnet_diagnostic.SA1200.severity   = none       # Using directives should be placed correctly
dotnet_diagnostic.SA1201.severity   = none       # Elements should appear in the correct order
dotnet_diagnostic.SA1202.severity   = none       # Elements should be ordered by access
dotnet_diagnostic.SA1203.severity   = none       # Constants should appear before fields
dotnet_diagnostic.SA1204.severity   = none       # Static elements should appear before instance elements
dotnet_diagnostic.SA1208.severity   = none       # System using directives should be placed before other using directives
dotnet_diagnostic.SA1214.severity   = none       # Readonly fields should appear before non-readonly fields
dotnet_diagnostic.SA1300.severity   = none       # Element should begin with upper-case letter
dotnet_diagnostic.SA1302.severity   = none       # Interface names should begin with I
dotnet_diagnostic.SA1304.severity   = none       # Non-private readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1306.severity   = none       # Field names should begin with lower-case letter
dotnet_diagnostic.SA1307.severity   = none       # Accessible fields should begin with upper-case letter
dotnet_diagnostic.SA1308.severity   = none       # Variable names should not be prefixed
dotnet_diagnostic.SA1309.severity   = none       # Field names should not begin with underscore
dotnet_diagnostic.SA1310.severity   = none       # Field names should not contain underscore
dotnet_diagnostic.SA1311.severity   = none       # Static readonly fields should begin with upper-case letter
dotnet_diagnostic.SA1313.severity   = none       # Parameter names should begin with lower-case letter
dotnet_diagnostic.SA1402.severity   = none       # File may only contain a single type
dotnet_diagnostic.SA1502.severity   = none       # Element should not be on a single line
dotnet_diagnostic.SA1503.severity   = none       # Braces should not be omitted
dotnet_diagnostic.SA1513.severity   = none       # Closing brace should be followed by blank line
dotnet_diagnostic.SA1515.severity   = none       # Single-line comment should be preceded by blank line
dotnet_diagnostic.SA1519.severity   = none       # Braces should not be omitted from multi-line child statement
dotnet_diagnostic.SA1520.severity   = none       # Use braces consistently
dotnet_diagnostic.SA1600.severity   = none       # Elements should be documented
dotnet_diagnostic.SA1601.severity   = none       # Partial elements should be documented
dotnet_diagnostic.SA1602.severity   = none       # Enumeration items should be documented
dotnet_diagnostic.SA1611.severity   = none       # Element parameters should be documented
dotnet_diagnostic.SA1615.severity   = none       # Element return value should be documented
dotnet_diagnostic.SA1618.severity   = none       # Generic type parameters should be documented
dotnet_diagnostic.SA1623.severity   = none       # Property summary documentation should match accessors
dotnet_diagnostic.SA1633.severity   = none       # File should have header
dotnet_diagnostic.SA1636.severity   = none       # File header copyright text should match
dotnet_diagnostic.SA1637.severity   = none       # File header should contain file name
dotnet_diagnostic.SA1640.severity   = none       # File header should have valid company text
dotnet_diagnostic.SA1649.severity   = none       # File name should match first type name

dotnet_diagnostic.SA1401.severity   = suggestion # Fields should be private
dotnet_diagnostic.SA1407.severity   = suggestion # Arithmetic expressions should declare precedence
dotnet_diagnostic.SA1501.severity   = suggestion # Statement should not be on a single line
dotnet_diagnostic.SA1512.severity   = suggestion # Single-line comments should not be followed by blank line

dotnet_diagnostic.SX1101.severity   = warning    # Do not prefix local calls with 'this.' [Justification: 'this.' is redundant.]

dotnet_diagnostic.SYSLIB1045.severity = warning   

# .NET diagnostics defaults
dotnet_diagnostic.AsyncFixer02.severity = warning    # Long-running or blocking operations inside an async method
dotnet_diagnostic.AsyncFixer03.severity = warning    # Fire-and-forget async-void methods or delegates
dotnet_diagnostic.AsyncFixer04.severity = warning    # Fire-and-forget async call inside a using block
dotnet_diagnostic.AsyncFixer05.severity = warning    # Downcasting from a nested task to an outer task.

dotnet_diagnostic.CA1002.severity   = none       # Do not expose generic lists
dotnet_diagnostic.CA1003.severity   = none       # Use generic event handler instances
dotnet_diagnostic.CA1005.severity   = none       # Avoid excessive parameters on generic types
dotnet_diagnostic.CA1014.severity   = none       # Mark assemblies with CLSCompliant
dotnet_diagnostic.CA1017.severity   = none       # Mark assemblies with ComVisible
dotnet_diagnostic.CA1021.severity   = none       # Avoid out parameters
dotnet_diagnostic.CA1024.severity   = none       # Use properties where appropriate
dotnet_diagnostic.CA1027.severity   = none       # Mark enums with FlagsAttribute
dotnet_diagnostic.CA1028.severity   = none       # Enum Storage should be Int32
dotnet_diagnostic.CA1030.severity   = none       # Use events where appropriate
dotnet_diagnostic.CA1031.severity   = none       # Do not catch general exception types
dotnet_diagnostic.CA1032.severity   = none       # Implement standard exception constructors
dotnet_diagnostic.CA1033.severity   = none       # Interface methods should be callable by child types
dotnet_diagnostic.CA1034.severity   = none       # Nested types should not be visible
dotnet_diagnostic.CA1040.severity   = none       # Avoid empty interfaces
dotnet_diagnostic.CA1043.severity   = none       # Use Integral Or String Argument For Indexers
dotnet_diagnostic.CA1046.severity   = none       # Do not overload equality operator on reference types
dotnet_diagnostic.CA1052.severity   = none       # Static holder types should be Static or NotInheritable
dotnet_diagnostic.CA1054.severity   = none       # URI-like parameters should not be strings
dotnet_diagnostic.CA1055.severity   = none       # URI-like return values should not be strings
dotnet_diagnostic.CA1056.severity   = none       # URI-like properties should not be strings
dotnet_diagnostic.CA1058.severity   = none       # Types should not extend certain base types
dotnet_diagnostic.CA1060.severity   = none       # Move pinvokes to native methods class
dotnet_diagnostic.CA1062.severity   = none       # Validate arguments of public methods
dotnet_diagnostic.CA1065.severity   = none       # Do not raise exceptions in unexpected locations
dotnet_diagnostic.CA1066.severity   = none       # Implement IEquatable when overriding Object.Equals
dotnet_diagnostic.CA1303.severity   = none       # Do not pass literals as localized parameters
dotnet_diagnostic.CA1307.severity   = none       # Specify StringComparison for clarity
dotnet_diagnostic.CA1308.severity   = none       # Normalize strings to uppercase
dotnet_diagnostic.CA1501.severity   = none       # Avoid excessive inheritance
dotnet_diagnostic.CA1502.severity   = none       # Avoid excessive complexity
dotnet_diagnostic.CA1505.severity   = none       # Avoid unmaintainable code
dotnet_diagnostic.CA1506.severity   = none       # Avoid excessive class coupling
dotnet_diagnostic.CA1508.severity   = none       # Avoid dead conditional code
dotnet_diagnostic.CA1509.severity   = none       # Invalid entry in code metrics rule specification file
dotnet_diagnostic.CA1515.severity   = none       # Consider making public types internal
dotnet_diagnostic.CA1700.severity   = none       # Do not name enum values 'Reserved'
dotnet_diagnostic.CA1713.severity   = none       # Events should not have 'Before' or 'After' prefix
dotnet_diagnostic.CA1721.severity   = none       # Property names should not match get methods
dotnet_diagnostic.CA1724.severity   = none       # Type names should not match namespaces
dotnet_diagnostic.CA1802.severity   = none       # Use literals where appropriate
dotnet_diagnostic.CA1810.severity   = none       # Initialize reference type static fields inline
dotnet_diagnostic.CA1812.severity   = none       # Avoid uninstantiated internal classes
dotnet_diagnostic.CA1813.severity   = none       # Avoid unsealed attributes
dotnet_diagnostic.CA1814.severity   = none       # Prefer jagged arrays over multidimensional
dotnet_diagnostic.CA1815.severity   = none       # Override equals and operator equals on value types
dotnet_diagnostic.CA1819.severity   = none       # Properties should not return arrays
dotnet_diagnostic.CA1820.severity   = none       # Test for empty strings using string length
dotnet_diagnostic.CA1823.severity   = none       # Avoid unused private fields
dotnet_diagnostic.CA1849.severity   = none       # Call async methods when in an async method
dotnet_diagnostic.CA1851.severity   = none       # Possible multiple enumerations of 'IEnumerable' collection
dotnet_diagnostic.CA1867.severity   = none       # Use char overload
dotnet_diagnostic.CA2002.severity   = none       # Do not lock on objects with weak identity
dotnet_diagnostic.CA2007.severity   = none       # Consider calling ConfigureAwait on the awaited task
dotnet_diagnostic.CA2008.severity   = none       # Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2100.severity   = none       # Review SQL queries for security vulnerabilities
dotnet_diagnostic.CA2119.severity   = none       # Seal methods that satisfy private interfaces
dotnet_diagnostic.CA2153.severity   = none       # Do Not Catch Corrupted State Exceptions
dotnet_diagnostic.CA2207.severity   = none       # Initialize value type static fields inline
dotnet_diagnostic.CA2214.severity   = none       # Do not call overridable methods in constructors
dotnet_diagnostic.CA2216.severity   = none       # Disposable types should declare finalizer
dotnet_diagnostic.CA2217.severity   = none       # Do not mark enums with FlagsAttribute
dotnet_diagnostic.CA2225.severity   = none       # Operator overloads have named alternates
dotnet_diagnostic.CA2226.severity   = none       # Operators should have symmetrical overloads
dotnet_diagnostic.CA2227.severity   = none       # Collection properties should be read only
dotnet_diagnostic.CA2234.severity   = none       # Pass system uri objects instead of strings
dotnet_diagnostic.CA2235.severity   = none       # Mark all non-serializable fields
dotnet_diagnostic.CA2237.severity   = none       # Mark ISerializable types with serializable
dotnet_diagnostic.CA2243.severity   = none       # Attribute string literals should parse correctly
dotnet_diagnostic.CA2300.severity   = none       # Do not use insecure deserializer BinaryFormatter
dotnet_diagnostic.CA2301.severity   = none       # Do not call BinaryFormatter.Deserialize without first setting BinaryFormatter.Binder
dotnet_diagnostic.CA2302.severity   = none       # Ensure BinaryFormatter.Binder is set before calling BinaryFormatter.Deserialize
dotnet_diagnostic.CA2305.severity   = none       # Do not use insecure deserializer LosFormatter
dotnet_diagnostic.CA2310.severity   = none       # Do not use insecure deserializer NetDataContractSerializer
dotnet_diagnostic.CA2311.severity   = none       # Do not deserialize without first setting NetDataContractSerializer.Binder
dotnet_diagnostic.CA2312.severity   = none       # Ensure NetDataContractSerializer.Binder is set before deserializing
dotnet_diagnostic.CA2315.severity   = none       # Do not use insecure deserializer ObjectStateFormatter
dotnet_diagnostic.CA2321.severity   = none       # Do not deserialize with JavaScriptSerializer using a SimpleTypeResolver
dotnet_diagnostic.CA2322.severity   = none       # Ensure JavaScriptSerializer is not initialized with SimpleTypeResolver before deserializing
dotnet_diagnostic.CA2326.severity   = none       # Do not use TypeNameHandling values other than None
dotnet_diagnostic.CA2327.severity   = none       # Do not use insecure JsonSerializerSettings
dotnet_diagnostic.CA2328.severity   = none       # Ensure that JsonSerializerSettings are secure
dotnet_diagnostic.CA2329.severity   = none       # Do not deserialize with JsonSerializer using an insecure configuration
dotnet_diagnostic.CA2330.severity   = none       # Ensure that JsonSerializer has a secure configuration when deserializing
dotnet_diagnostic.CA2350.severity   = none       # Do not use DataTable.ReadXml() with untrusted data
dotnet_diagnostic.CA2351.severity   = none       # Do not use DataSet.ReadXml() with untrusted data
dotnet_diagnostic.CA2352.severity   = none       # Unsafe DataSet or DataTable in serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2353.severity   = none       # Unsafe DataSet or DataTable in serializable type
dotnet_diagnostic.CA2354.severity   = none       # Unsafe DataSet or DataTable in deserialized object graph can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA2355.severity   = none       # Unsafe DataSet or DataTable type found in deserializable object graph
dotnet_diagnostic.CA2356.severity   = none       # Unsafe DataSet or DataTable type in web deserializable object graph
dotnet_diagnostic.CA2361.severity   = none       # Ensure auto-generated class containing DataSet.ReadXml() is not used with untrusted data
dotnet_diagnostic.CA2362.severity   = none       # Unsafe DataSet or DataTable in auto-generated serializable type can be vulnerable to remote code execution attacks
dotnet_diagnostic.CA3001.severity   = none       # Review code for SQL injection vulnerabilities
dotnet_diagnostic.CA3002.severity   = none       # Review code for XSS vulnerabilities
dotnet_diagnostic.CA3003.severity   = none       # Review code for file path injection vulnerabilities
dotnet_diagnostic.CA3004.severity   = none       # Review code for information disclosure vulnerabilities
dotnet_diagnostic.CA3005.severity   = none       # Review code for LDAP injection vulnerabilities
dotnet_diagnostic.CA3006.severity   = none       # Review code for process command injection vulnerabilities
dotnet_diagnostic.CA3007.severity   = none       # Review code for open redirect vulnerabilities
dotnet_diagnostic.CA3008.severity   = none       # Review code for XPath injection vulnerabilities
dotnet_diagnostic.CA3009.severity   = none       # Review code for XML injection vulnerabilities
dotnet_diagnostic.CA3010.severity   = none       # Review code for XAML injection vulnerabilities
dotnet_diagnostic.CA3011.severity   = none       # Review code for DLL injection vulnerabilities
dotnet_diagnostic.CA3012.severity   = none       # Review code for regex injection vulnerabilities
dotnet_diagnostic.CA5358.severity   = none       # Review cipher mode usage with cryptography experts
dotnet_diagnostic.CA5361.severity   = none       # Do Not Disable SChannel Use of Strong Crypto
dotnet_diagnostic.CA5362.severity   = none       # Potential reference cycle in deserialized object graph
dotnet_diagnostic.CA5367.severity   = none       # Do Not Serialize Types With Pointer Fields
dotnet_diagnostic.CA5375.severity   = none       # Do Not Use Account Shared Access Signature
dotnet_diagnostic.CA5376.severity   = none       # Use SharedAccessProtocol HttpsOnly
dotnet_diagnostic.CA5377.severity   = none       # Use Container Level Access Policy
dotnet_diagnostic.CA5378.severity   = none       # Do not disable ServicePointManagerSecurityProtocols
dotnet_diagnostic.CA5380.severity   = none       # Do Not Add Certificates To Root Store
dotnet_diagnostic.CA5381.severity   = none       # Ensure Certificates Are Not Added To Root Store
dotnet_diagnostic.CA5382.severity   = none       # Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5383.severity   = none       # Ensure Use Secure Cookies In ASP.NET Core
dotnet_diagnostic.CA5386.severity   = none       # Avoid hardcoding SecurityProtocolType value
dotnet_diagnostic.CA5387.severity   = none       # Do Not Use Weak Key Derivation Function With Insufficient Iteration Count
dotnet_diagnostic.CA5388.severity   = none       # Ensure Sufficient Iteration Count When Using Weak Key Derivation Function
dotnet_diagnostic.CA5389.severity   = none       # Do Not Add Archive Item's Path To The Target File System Path
dotnet_diagnostic.CA5390.severity   = none       # Do not hard-code encryption key
dotnet_diagnostic.CA5391.severity   = none       # Use antiforgery tokens in ASP.NET Core MVC controllers
dotnet_diagnostic.CA5392.severity   = none       # Use DefaultDllImportSearchPaths attribute for P/Invokes
dotnet_diagnostic.CA5393.severity   = none       # Do not use unsafe DllImportSearchPath value
dotnet_diagnostic.CA5394.severity   = none       # Do not use insecure randomness
dotnet_diagnostic.CA5395.severity   = none       # Miss HttpVerb attribute for action methods
dotnet_diagnostic.CA5396.severity   = none       # Set HttpOnly to true for HttpCookie
dotnet_diagnostic.CA5398.severity   = none       # Avoid hardcoded SslProtocols values
dotnet_diagnostic.CA5399.severity   = none       # HttpClients should enable certificate revocation list checks
dotnet_diagnostic.CA5400.severity   = none       # Ensure HttpClient certificate revocation list check is not disabled
dotnet_diagnostic.CA5401.severity   = none       # Do not use CreateEncryptor with non-default IV
dotnet_diagnostic.CA5402.severity   = none       # Use CreateEncryptor with the default IV
dotnet_diagnostic.CA5403.severity   = none       # Do not hard-code certificate
dotnet_diagnostic.CA5404.severity   = none       # Do not disable token validation checks
dotnet_diagnostic.CA5405.severity   = none       # Do not always skip token validation in delegates

dotnet_diagnostic.CA1000.severity   = silent     # Do not declare static members on generic types
dotnet_diagnostic.CA1001.severity   = silent     # Types that own disposable fields should be disposable
dotnet_diagnostic.CA1010.severity   = silent     # Generic interface should also be implemented
dotnet_diagnostic.CA1036.severity   = silent     # Override methods on comparable types
dotnet_diagnostic.CA1051.severity   = silent     # Do not declare visible instance fields
dotnet_diagnostic.CA1200.severity   = silent     # Avoid using cref tags with a prefix
dotnet_diagnostic.CA1304.severity   = silent     # Specify CultureInfo
dotnet_diagnostic.CA1305.severity   = silent     # Specify IFormatProvider
dotnet_diagnostic.CA1309.severity   = silent     # Use ordinal string comparison
dotnet_diagnostic.CA1310.severity   = silent     # Specify StringComparison for correctness
dotnet_diagnostic.CA1311.severity   = silent     # Specify a culture or use an invariant version
dotnet_diagnostic.CA1707.severity   = silent     # Identifiers should not contain underscores
dotnet_diagnostic.CA1708.severity   = silent     # Identifiers should differ by more than case
dotnet_diagnostic.CA1710.severity   = silent     # Identifiers should have correct suffix
dotnet_diagnostic.CA1711.severity   = silent     # Identifiers should not have incorrect suffix
dotnet_diagnostic.CA1712.severity   = silent     # Do not prefix enum values with type name
dotnet_diagnostic.CA1715.severity   = silent     # Identifiers should have correct prefix
dotnet_diagnostic.CA1716.severity   = silent     # Identifiers should not match keywords
dotnet_diagnostic.CA1720.severity   = silent     # Identifier contains type name
dotnet_diagnostic.CA1725.severity   = silent     # Parameter names should match base declaration
dotnet_diagnostic.CA1727.severity   = silent     # Use PascalCase for named placeholders
dotnet_diagnostic.CA1805.severity   = silent     # Do not initialize unnecessarily
dotnet_diagnostic.CA1838.severity   = silent     # Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1848.severity   = silent     # Use the LoggerMessage delegates
dotnet_diagnostic.CA1852.severity   = silent     # Seal internal types
dotnet_diagnostic.CA1863.severity   = silent     # Use 'CompositeFormat'
dotnet_diagnostic.CA2215.severity   = silent     # Dispose methods should call base class dispose
dotnet_diagnostic.CA2251.severity   = silent     # Use 'string.Equals'
dotnet_diagnostic.CA3061.severity   = silent     # Do Not Add Schema By URL
dotnet_diagnostic.CA3075.severity   = silent     # Insecure DTD processing in XML
dotnet_diagnostic.CA3076.severity   = silent     # Insecure XSLT script processing
dotnet_diagnostic.CA3077.severity   = silent     # Insecure Processing in API Design, XmlDocument and XmlTextReader
dotnet_diagnostic.CA3147.severity   = silent     # Mark Verb Handlers With Validate Antiforgery Token
dotnet_diagnostic.CA5350.severity   = silent     # Do Not Use Weak Cryptographic Algorithms
dotnet_diagnostic.CA5351.severity   = silent     # Do Not Use Broken Cryptographic Algorithms
dotnet_diagnostic.CA5359.severity   = silent     # Do Not Disable Certificate Validation
dotnet_diagnostic.CA5360.severity   = silent     # Do Not Call Dangerous Methods In Deserialization
dotnet_diagnostic.CA5363.severity   = silent     # Do Not Disable Request Validation
dotnet_diagnostic.CA5364.severity   = silent     # Do Not Use Deprecated Security Protocols
dotnet_diagnostic.CA5365.severity   = silent     # Do Not Disable HTTP Header Checking
dotnet_diagnostic.CA5366.severity   = silent     # Use XmlReader for 'DataSet.ReadXml()'
dotnet_diagnostic.CA5368.severity   = silent     # Set ViewStateUserKey For Classes Derived From Page
dotnet_diagnostic.CA5369.severity   = silent     # Use XmlReader for 'XmlSerializer.Deserialize()'
dotnet_diagnostic.CA5370.severity   = silent     # Use XmlReader for XmlValidatingReader constructor
dotnet_diagnostic.CA5371.severity   = silent     # Use XmlReader for 'XmlSchema.Read()'
dotnet_diagnostic.CA5372.severity   = silent     # Use XmlReader for XPathDocument constructor
dotnet_diagnostic.CA5373.severity   = silent     # Do not use obsolete key derivation function
dotnet_diagnostic.CA5374.severity   = silent     # Do Not Use XslTransform
dotnet_diagnostic.CA5379.severity   = silent     # Ensure Key Derivation Function algorithm is sufficiently strong
dotnet_diagnostic.CA5384.severity   = silent     # Do Not Use Digital Signature Algorithm (DSA)
dotnet_diagnostic.CA5385.severity   = silent     # Use Rivest-Shamir-Adleman (RSA) Algorithm With Sufficient Key Size
dotnet_diagnostic.CA5397.severity   = silent     # Do not use deprecated SslProtocols values

dotnet_diagnostic.CA1016.severity   = info       # Mark assemblies with assembly version
dotnet_diagnostic.CA1018.severity   = info       # Mark attributes with AttributeUsageAttribute
dotnet_diagnostic.CA1041.severity   = info       # Provide ObsoleteAttribute message
dotnet_diagnostic.CA1050.severity   = info       # Declare types in namespaces
dotnet_diagnostic.CA1061.severity   = info       # Do not hide base class methods
dotnet_diagnostic.CA1067.severity   = info       # Override Object.Equals(object) when implementing IEquatable<T>
dotnet_diagnostic.CA1068.severity   = info       # CancellationToken parameters must come last
dotnet_diagnostic.CA1070.severity   = info       # Do not declare event fields as virtual
dotnet_diagnostic.CA1401.severity   = info       # P/Invokes should not be visible
dotnet_diagnostic.CA1419.severity   = info       # Provide a parameterless constructor that is as visible as the containing type for concrete types derived from 'System.Runtime.InteropServices.SafeHandle'
dotnet_diagnostic.CA1421.severity   = info       # This method uses runtime marshalling even when the 'DisableRuntimeMarshallingAttribute' is applied
dotnet_diagnostic.CA1507.severity   = info       # Use nameof to express symbol names
dotnet_diagnostic.CA1510.severity   = info       # Use ArgumentNullException throw helper
dotnet_diagnostic.CA1511.severity   = info       # Use ArgumentException throw helper
dotnet_diagnostic.CA1512.severity   = info       # Use ArgumentOutOfRangeException throw helper
dotnet_diagnostic.CA1513.severity   = info       # Use ObjectDisposedException throw helper
dotnet_diagnostic.CA1514.severity   = info       # Avoid redundant length argument
dotnet_diagnostic.CA1821.severity   = info       # Remove empty Finalizers
dotnet_diagnostic.CA1824.severity   = info       # Mark assemblies with NeutralResourcesLanguageAttribute
dotnet_diagnostic.CA1826.severity   = info       # Do not use Enumerable methods on indexable collections
dotnet_diagnostic.CA1829.severity   = info       # Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1830.severity   = info       # Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1832.severity   = info       # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity   = info       # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1834.severity   = info       # Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1835.severity   = info       # Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1836.severity   = info       # Prefer IsEmpty over Count
dotnet_diagnostic.CA1837.severity   = info       # Use 'Environment.ProcessId'
dotnet_diagnostic.CA1839.severity   = info       # Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1840.severity   = info       # Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1841.severity   = info       # Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1842.severity   = info       # Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity   = info       # Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1844.severity   = info       # Provide memory-based overrides of async methods when subclassing 'Stream'
dotnet_diagnostic.CA1845.severity   = info       # Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity   = info       # Prefer 'AsSpan' over 'Substring'
dotnet_diagnostic.CA1847.severity   = info       # Use char literal for a single character lookup
dotnet_diagnostic.CA1850.severity   = info       # Prefer static 'HashData' method over 'ComputeHash'
dotnet_diagnostic.CA1853.severity   = info       # Unnecessary call to 'Dictionary.ContainsKey(key)'
dotnet_diagnostic.CA1855.severity   = info       # Prefer 'Clear' over 'Fill'
dotnet_diagnostic.CA1858.severity   = info       # Use 'StartsWith' instead of 'IndexOf'
dotnet_diagnostic.CA1859.severity   = info       # Use concrete types when possible for improved performance
dotnet_diagnostic.CA1861.severity   = info       # Avoid constant arrays as arguments
dotnet_diagnostic.CA1862.severity   = info       # Use the 'StringComparison' method overloads to perform case-insensitive string comparisons
dotnet_diagnostic.CA1865.severity   = info       # Use char overload
dotnet_diagnostic.CA1866.severity   = info       # Use char overload
dotnet_diagnostic.CA1868.severity   = info       # Unnecessary call to 'Contains(item)'
dotnet_diagnostic.CA1870.severity   = info       # Use a cached 'SearchValues' instance
dotnet_diagnostic.CA2009.severity   = info       # Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity   = info       # Avoid infinite recursion
dotnet_diagnostic.CA2012.severity   = info       # Use ValueTasks correctly
dotnet_diagnostic.CA2019.severity   = info       # Improper 'ThreadStatic' field initialization
dotnet_diagnostic.CA2020.severity   = info       # Prevent behavioral change
dotnet_diagnostic.CA2101.severity   = info       # Specify marshaling for P/Invoke string arguments
dotnet_diagnostic.CA2208.severity   = info       # Instantiate argument exceptions correctly
dotnet_diagnostic.CA2219.severity   = info       # Do not raise exceptions in finally clauses
dotnet_diagnostic.CA2241.severity   = info       # Provide correct arguments to formatting methods
dotnet_diagnostic.CA2242.severity   = info       # Test for NaN correctly
dotnet_diagnostic.CA2244.severity   = info       # Do not duplicate indexed element initializations
dotnet_diagnostic.CA2245.severity   = info       # Do not assign a property to itself
dotnet_diagnostic.CA2246.severity   = info       # Assigning symbol and its member in the same statement
dotnet_diagnostic.CA2248.severity   = info       # Provide correct 'enum' argument to 'Enum.HasFlag'
dotnet_diagnostic.CA2249.severity   = info       # Consider using 'string.Contains' instead of 'string.IndexOf'
dotnet_diagnostic.CA2250.severity   = info       # Use 'ThrowIfCancellationRequested'
dotnet_diagnostic.CA2253.severity   = info       # Named placeholders should not be numeric values
dotnet_diagnostic.CA2262.severity   = info       # Set 'MaxResponseHeadersLength' properly

dotnet_diagnostic.CA1416.severity   = warning    # Validate platform compatibility
dotnet_diagnostic.CA1417.severity   = warning    # Do not use 'OutAttribute' on string parameters for P/Invokes
dotnet_diagnostic.CA1418.severity   = warning    # Use valid platform string
dotnet_diagnostic.CA1420.severity   = warning    # Property, type, or attribute requires runtime marshalling
dotnet_diagnostic.CA1422.severity   = warning    # Validate platform compatibility
dotnet_diagnostic.CA1831.severity   = warning    # Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1857.severity   = warning    # A constant is expected for the parameter
dotnet_diagnostic.CA2013.severity   = warning    # Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity   = warning    # Do not use stackalloc in loops
dotnet_diagnostic.CA2015.severity   = warning    # Do not define finalizers for types derived from MemoryManager<T>
dotnet_diagnostic.CA2017.severity   = warning    # Parameter count mismatch
dotnet_diagnostic.CA2018.severity   = warning    # 'Buffer.BlockCopy' expects the number of bytes to be copied for the 'count' argument
dotnet_diagnostic.CA2021.severity   = warning    # Do not call Enumerable.Cast<T> or Enumerable.OfType<T> with incompatible types
dotnet_diagnostic.CA2200.severity   = warning    # Rethrow to preserve stack details
dotnet_diagnostic.CA2247.severity   = warning    # Argument passed to TaskCompletionSource constructor should be TaskCreationOptions enum instead of TaskContinuationOptions enum
dotnet_diagnostic.CA2255.severity   = warning    # The 'ModuleInitializer' attribute should not be used in libraries
dotnet_diagnostic.CA2256.severity   = warning    # All members declared in parent interfaces must have an implementation in a DynamicInterfaceCastableImplementation-attributed interface
dotnet_diagnostic.CA2257.severity   = warning    # Members defined on an interface with the 'DynamicInterfaceCastableImplementationAttribute' should be 'static'
dotnet_diagnostic.CA2258.severity   = warning    # Providing a 'DynamicInterfaceCastableImplementation' interface in Visual Basic is unsupported
dotnet_diagnostic.CA2259.severity   = warning    # 'ThreadStatic' only affects static fields
dotnet_diagnostic.CA2260.severity   = warning    # Use correct type parameter
dotnet_diagnostic.CA2261.severity   = warning    # Do not use ConfigureAwaitOptions.SuppressThrowing with Task<TResult>

dotnet_diagnostic.CA1856.severity   = error      # Incorrect usage of ConstantExpected attribute
dotnet_diagnostic.CA2252.severity   = error      # This API requires opting into preview features

dotnet_diagnostic.IDISP014.severity = info       # Use a single instance of HttpClient

dotnet_diagnostic.IDISP001.severity = warning    # Dispose created
dotnet_diagnostic.IDISP002.severity = warning    # Dispose member
dotnet_diagnostic.IDISP003.severity = warning    # Dispose previous before re-assigning
dotnet_diagnostic.IDISP004.severity = warning    # Don't ignore created IDisposable
dotnet_diagnostic.IDISP005.severity = warning    # Return type should indicate that the value should be disposed
dotnet_diagnostic.IDISP006.severity = warning    # Implement IDisposable
dotnet_diagnostic.IDISP007.severity = warning    # Don't dispose injected
dotnet_diagnostic.IDISP008.severity = warning    # Don't assign member with injected and created disposables
dotnet_diagnostic.IDISP009.severity = warning    # Add IDisposable interface
dotnet_diagnostic.IDISP010.severity = warning    # Call base.Dispose(disposing)
dotnet_diagnostic.IDISP011.severity = warning    # Don't return disposed instance
dotnet_diagnostic.IDISP012.severity = warning    # Property should not return created disposable
dotnet_diagnostic.IDISP013.severity = warning    # Await in using
dotnet_diagnostic.IDISP015.severity = warning    # Member should not return created and cached instance
dotnet_diagnostic.IDISP016.severity = warning    # Don't use disposed instance
dotnet_diagnostic.IDISP017.severity = warning    # Prefer using
dotnet_diagnostic.IDISP018.severity = warning    # Call SuppressFinalize
dotnet_diagnostic.IDISP019.severity = warning    # Call SuppressFinalize
dotnet_diagnostic.IDISP020.severity = warning    # Call SuppressFinalize(this)
dotnet_diagnostic.IDISP021.severity = warning    # Call this.Dispose(true)
dotnet_diagnostic.IDISP022.severity = warning    # Call this.Dispose(false)
dotnet_diagnostic.IDISP023.severity = warning    # Don't use reference types in finalizer context
dotnet_diagnostic.IDISP024.severity = warning    # Don't call GC.SuppressFinalize(this) when the type is sealed and has no finalizer
dotnet_diagnostic.IDISP025.severity = warning    # Class with no virtual dispose method should be sealed
dotnet_diagnostic.IDISP026.severity = warning    # Class with no virtual DisposeAsyncCore method should be sealed

dotnet_diagnostic.Marten1005.severity = info       # Consider using batched query

dotnet_diagnostic.Marten1000.severity = warning    # Session queried within an iteration
dotnet_diagnostic.Marten1001.severity = warning    # Event store queried within an iteration
dotnet_diagnostic.Marten1002.severity = warning    # Session used as a method argument within an iteration
dotnet_diagnostic.Marten1003.severity = warning    # Possible site for SQL injection
dotnet_diagnostic.Marten1004.severity = warning    # Possible premature query materialization
dotnet_diagnostic.Marten1006.severity = warning    # Session accessed in possibly multithreaded context
dotnet_diagnostic.Marten1007.severity = warning    # Tasks closes over session
dotnet_diagnostic.Marten1008.severity = warning    # Projection wired as synchronous and asynchronous

dotnet_diagnostic.NUnit2025.severity = none       # Wrong actual type used with ContainsConstraint

dotnet_diagnostic.NUnit1028.severity = info       # The non-test method is public
dotnet_diagnostic.NUnit2001.severity = info       # Consider using Assert.That(expr, Is.False) instead of ClassicAssert.False(expr)
dotnet_diagnostic.NUnit2002.severity = info       # Consider using Assert.That(expr, Is.False) instead of ClassicAssert.IsFalse(expr)
dotnet_diagnostic.NUnit2003.severity = info       # Consider using Assert.That(expr, Is.True) instead of ClassicAssert.IsTrue(expr)
dotnet_diagnostic.NUnit2004.severity = info       # Consider using Assert.That(expr, Is.True) instead of ClassicAssert.True(expr)
dotnet_diagnostic.NUnit2010.severity = info       # Use EqualConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2011.severity = info       # Use ContainsConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2012.severity = info       # Use StartsWithConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2013.severity = info       # Use EndsWithConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2014.severity = info       # Use SomeItemsConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2016.severity = info       # Consider using Assert.That(expr, Is.Null) instead of ClassicAssert.Null(expr)
dotnet_diagnostic.NUnit2017.severity = info       # Consider using Assert.That(expr, Is.Null) instead of ClassicAssert.IsNull(expr)
dotnet_diagnostic.NUnit2018.severity = info       # Consider using Assert.That(expr, Is.Not.Null) instead of ClassicAssert.NotNull(expr)
dotnet_diagnostic.NUnit2019.severity = info       # Consider using Assert.That(expr, Is.Not.Null) instead of ClassicAssert.IsNotNull(expr)
dotnet_diagnostic.NUnit2027.severity = info       # Consider using Assert.That(actual, Is.GreaterThan(expected)) instead of ClassicAssert.Greater(actual, expected)
dotnet_diagnostic.NUnit2028.severity = info       # Consider using Assert.That(actual, Is.GreaterThanOrEqualTo(expected)) instead of ClassicAssert.GreaterOrEqual(actual, expected)
dotnet_diagnostic.NUnit2029.severity = info       # Consider using Assert.That(actual, Is.LessThan(expected)) instead of ClassicAssert.Less(actual, expected)
dotnet_diagnostic.NUnit2030.severity = info       # Consider using Assert.That(actual, Is.LessThanOrEqualTo(expected)) instead of ClassicAssert.LessOrEqual(actual, expected)
dotnet_diagnostic.NUnit2032.severity = info       # Consider using Assert.That(expr, Is.Zero) instead of ClassicAssert.Zero(expr)
dotnet_diagnostic.NUnit2033.severity = info       # Consider using Assert.That(expr, Is.Not.Zero) instead of ClassicAssert.NotZero(expr)
dotnet_diagnostic.NUnit2034.severity = info       # Consider using Assert.That(expr, Is.NaN) instead of ClassicAssert.IsNaN(expr)
dotnet_diagnostic.NUnit2035.severity = info       # Consider using Assert.That(collection, Is.Empty) instead of ClassicAssert.IsEmpty(collection)
dotnet_diagnostic.NUnit2036.severity = info       # Consider using Assert.That(collection, Is.Not.Empty) instead of ClassicAssert.IsNotEmpty(collection)
dotnet_diagnostic.NUnit2037.severity = info       # Consider using Assert.That(collection, Does.Contain(instance)) instead of ClassicAssert.Contains(instance, collection)
dotnet_diagnostic.NUnit2038.severity = info       # Consider using Assert.That(actual, Is.InstanceOf(expected)) instead of ClassicAssert.IsInstanceOf(expected, actual)
dotnet_diagnostic.NUnit2039.severity = info       # Consider using Assert.That(actual, Is.Not.InstanceOf(expected)) instead of ClassicAssert.IsNotInstanceOf(expected, actual)
dotnet_diagnostic.NUnit2042.severity = info       # Comparison constraint on object
dotnet_diagnostic.NUnit2043.severity = info       # Use ComparisonConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit2045.severity = info       # Use Assert.Multiple
dotnet_diagnostic.NUnit2046.severity = info       # Use CollectionConstraint for better assertion messages in case of failure
dotnet_diagnostic.NUnit4001.severity = info       # Simplify the Values attribute

dotnet_diagnostic.NUnit1002.severity = warning    # The TestCaseSource should use nameof operator to specify target
dotnet_diagnostic.NUnit1008.severity = warning    # Specifying ParallelScope.Self on assembly level has no effect
dotnet_diagnostic.NUnit1021.severity = warning    # The ValueSource should use nameof operator to specify target
dotnet_diagnostic.NUnit1033.severity = warning    # The Write methods on TestContext will be marked as Obsolete and eventually removed
dotnet_diagnostic.NUnit2005.severity = warning    # Consider using Assert.That(actual, Is.EqualTo(expected)) instead of ClassicAssert.AreEqual(expected, actual)
dotnet_diagnostic.NUnit2006.severity = warning    # Consider using Assert.That(actual, Is.Not.EqualTo(expected)) instead of ClassicAssert.AreNotEqual(expected, actual)
dotnet_diagnostic.NUnit2007.severity = warning    # The actual value should not be a constant
dotnet_diagnostic.NUnit2008.severity = warning    # Incorrect IgnoreCase usage
dotnet_diagnostic.NUnit2009.severity = warning    # The same value has been provided as both the actual and the expected argument
dotnet_diagnostic.NUnit2015.severity = warning    # Consider using Assert.That(actual, Is.SameAs(expected)) instead of ClassicAssert.AreSame(expected, actual)
dotnet_diagnostic.NUnit2031.severity = warning    # Consider using Assert.That(actual, Is.Not.SameAs(expected)) instead of ClassicAssert.AreNotSame(expected, actual)
dotnet_diagnostic.NUnit2047.severity = warning    # Incompatible types for Within constraint
dotnet_diagnostic.NUnit2048.severity = warning    # Consider using Assert.That(...) instead of StringAssert(...)
dotnet_diagnostic.NUnit2049.severity = warning    # Consider using Assert.That(...) instead of CollectionAssert(...)

dotnet_diagnostic.NUnit1003.severity = error      # The TestCaseAttribute provided too few arguments
dotnet_diagnostic.NUnit1004.severity = error      # The TestCaseAttribute provided too many arguments
dotnet_diagnostic.NUnit1005.severity = error      # The type of the value specified via ExpectedResult must match the return type of the method
dotnet_diagnostic.NUnit1006.severity = error      # ExpectedResult must not be specified when the method returns void
dotnet_diagnostic.NUnit1007.severity = error      # The method has non-void return type, but no result is expected in ExpectedResult
dotnet_diagnostic.NUnit1009.severity = error      # One may not specify ParallelScope.Children on a non-parameterized test method
dotnet_diagnostic.NUnit1010.severity = error      # One may not specify ParallelScope.Fixtures on a test method
dotnet_diagnostic.NUnit1011.severity = error      # The TestCaseSource argument does not specify an existing member
dotnet_diagnostic.NUnit1012.severity = error      # The async test method must have a non-void return type
dotnet_diagnostic.NUnit1013.severity = error      # The async test method must have a non-generic Task return type when no result is expected
dotnet_diagnostic.NUnit1014.severity = error      # The async test method must have a Task<T> return type when a result is expected
dotnet_diagnostic.NUnit1015.severity = error      # The source type does not implement I(Async)Enumerable
dotnet_diagnostic.NUnit1016.severity = error      # The source type does not have a default constructor
dotnet_diagnostic.NUnit1017.severity = error      # The specified source is not static
dotnet_diagnostic.NUnit1018.severity = error      # The number of parameters provided by the TestCaseSource does not match the number of parameters in the target method
dotnet_diagnostic.NUnit1019.severity = error      # The source specified by the TestCaseSource does not return an I(Async)Enumerable or a type that implements I(Async)Enumerable
dotnet_diagnostic.NUnit1020.severity = error      # The TestCaseSource provides parameters to a source - field or property - that expects no parameters
dotnet_diagnostic.NUnit1022.severity = error      # The specified source is not static
dotnet_diagnostic.NUnit1023.severity = error      # The target method expects parameters which cannot be supplied by the ValueSource
dotnet_diagnostic.NUnit1024.severity = error      # The source specified by the ValueSource does not return an I(Async)Enumerable or a type that implements I(Async)Enumerable
dotnet_diagnostic.NUnit1025.severity = error      # The ValueSource argument does not specify an existing member
dotnet_diagnostic.NUnit1026.severity = error      # The test or setup/teardown method is not public
dotnet_diagnostic.NUnit1027.severity = error      # The test method has parameters, but no arguments are supplied by attributes
dotnet_diagnostic.NUnit1029.severity = error      # The number of parameters provided by the TestCaseSource does not match the number of parameters in the Test method
dotnet_diagnostic.NUnit1030.severity = error      # The type of parameter provided by the TestCaseSource does not match the type of the parameter in the Test method
dotnet_diagnostic.NUnit1031.severity = error      # The individual arguments provided by a ValuesAttribute must match the type of the corresponding parameter of the method
dotnet_diagnostic.NUnit1032.severity = error      # An IDisposable field/property should be Disposed in a TearDown method
dotnet_diagnostic.NUnit2020.severity = error      # Incompatible types for SameAs constraint
dotnet_diagnostic.NUnit2021.severity = error      # Incompatible types for EqualTo constraint
dotnet_diagnostic.NUnit2022.severity = error      # Missing property required for constraint
dotnet_diagnostic.NUnit2023.severity = error      # Invalid NullConstraint usage
dotnet_diagnostic.NUnit2024.severity = error      # Wrong actual type used with String Constraint
dotnet_diagnostic.NUnit2026.severity = error      # Wrong actual type used with the SomeItemsConstraint with EqualConstraint
dotnet_diagnostic.NUnit2040.severity = error      # Non-reference types for SameAs constraint
dotnet_diagnostic.NUnit2041.severity = error      # Incompatible types for comparison constraint
dotnet_diagnostic.NUnit2044.severity = error      # Non-delegate actual parameter
dotnet_diagnostic.NUnit2050.severity = error      # NUnit 4 no longer supports string.Format specification

dotnet_diagnostic.Proj0001.severity = warning    # MS Build project file could not be located
dotnet_diagnostic.Proj0002.severity = warning    # Upgrade legacy MS Build project files
dotnet_diagnostic.Proj0003.severity = warning    # Define usings explicit
dotnet_diagnostic.Proj0004.severity = warning    # Run NuGet security audits automatically
dotnet_diagnostic.Proj0005.severity = warning    # Define package reference assets as attributes
dotnet_diagnostic.Proj0006.severity = warning    # Add additional files to improve static code analysis
dotnet_diagnostic.Proj0007.severity = warning    # Remove empty nodes
dotnet_diagnostic.Proj0008.severity = warning    # Remove folder nodes
dotnet_diagnostic.Proj0009.severity = warning    # Use the <TargetFramework> node for a single target framework
dotnet_diagnostic.Proj0010.severity = warning    # Define the project output type explicitly
dotnet_diagnostic.Proj0011.severity = warning    # Define properties once
dotnet_diagnostic.Proj0012.severity = warning    # Reassign properties with a different value
dotnet_diagnostic.Proj0013.severity = warning    # Include package references only once
dotnet_diagnostic.Proj0014.severity = warning    # Include project references only once
dotnet_diagnostic.Proj0015.severity = warning    # Order package references alphabetically
dotnet_diagnostic.Proj0016.severity = warning    # Order project references alphabetically
dotnet_diagnostic.Proj0018.severity = warning    # Order using directives by type
dotnet_diagnostic.Proj0019.severity = warning    # Order using directives alphabetically
dotnet_diagnostic.Proj0020.severity = warning    # Item group should only contain nodes of a single type
dotnet_diagnostic.Proj0021.severity = warning    # Build actions should have a single task
dotnet_diagnostic.Proj0022.severity = warning    # Build action includes should exist
dotnet_diagnostic.Proj0023.severity = warning    # Use forward slashes in paths
dotnet_diagnostic.Proj0024.severity = warning    # Order package versions alphabetically
dotnet_diagnostic.Proj0025.severity = warning    # Migrate from ruleset file to .globalconfig file
dotnet_diagnostic.Proj0200.severity = warning    # Define the project packability explicitly
dotnet_diagnostic.Proj0201.severity = warning    # Define the project version explicitly
dotnet_diagnostic.Proj0202.severity = warning    # Define the project description explicitly
dotnet_diagnostic.Proj0203.severity = warning    # Define the project authors explicitly
dotnet_diagnostic.Proj0204.severity = warning    # Define the project tags explicitly
dotnet_diagnostic.Proj0205.severity = warning    # Define the project repository URL explicitly
dotnet_diagnostic.Proj0206.severity = warning    # Define the project URL explicitly
dotnet_diagnostic.Proj0207.severity = warning    # Define the project copyright explicitly
dotnet_diagnostic.Proj0208.severity = warning    # Define the project release notes explicitly
dotnet_diagnostic.Proj0209.severity = warning    # Define the project readme file explicitly
dotnet_diagnostic.Proj0210.severity = warning    # Define the project license expression explicitly
dotnet_diagnostic.Proj0211.severity = warning    # Avoid using deprecated license definition
dotnet_diagnostic.Proj0212.severity = warning    # Define the project icon file explicitly
dotnet_diagnostic.Proj0213.severity = warning    # Define the project icon URL explicitly
dotnet_diagnostic.Proj0214.severity = warning    # Define the NuGet project ID explicitly
dotnet_diagnostic.Proj0215.severity = warning    # Provide a compliant NuGet package icon
dotnet_diagnostic.Proj0240.severity = warning    # Enable package validation
dotnet_diagnostic.Proj0242.severity = warning    # Generate NuGet packages conditionally
dotnet_diagnostic.Proj0400.severity = warning    # Define the project publishability explicitly
dotnet_diagnostic.Proj0450.severity = warning    # Test projects should not be packable
dotnet_diagnostic.Proj0451.severity = warning    # Test projects should not be publishable
dotnet_diagnostic.Proj0452.severity = warning    # Test projects require Microsoft.NET.Test.Sdk
dotnet_diagnostic.Proj0453.severity = warning    # Using Microsoft.NET.Test.Sdk implies a test project
dotnet_diagnostic.Proj0600.severity = warning    # Avoid generating packages on build if not packable
dotnet_diagnostic.Proj0800.severity = warning    # Configure Central Package Management explicitly
dotnet_diagnostic.Proj0801.severity = warning    # Include 'Directory.Packages.props'
dotnet_diagnostic.Proj0802.severity = warning    # Enable Central Package Management centrally
dotnet_diagnostic.Proj0803.severity = warning    # Use VersionOverride only with Central Package Management enabled
dotnet_diagnostic.Proj0804.severity = warning    # Use Version only with Central Package Management not enabled
dotnet_diagnostic.Proj0805.severity = warning    # Define version for PackageReference
dotnet_diagnostic.Proj0806.severity = warning    # VersionOverride should change the version
dotnet_diagnostic.Proj0807.severity = warning    # Only use Directory.Packages.props for Central Package Management
dotnet_diagnostic.Proj1000.severity = warning    # Use the .NET project file analyzers
dotnet_diagnostic.Proj1001.severity = warning    # Use analyzers for packages
dotnet_diagnostic.Proj1002.severity = warning    # Use Microsoft's .NET analyzers
dotnet_diagnostic.Proj1003.severity = warning    # Use Sonar analyzers for packages
dotnet_diagnostic.Proj1100.severity = warning    # Avoid using Moq
dotnet_diagnostic.Proj1101.severity = warning    # Package references should have stable versions
dotnet_diagnostic.Proj1200.severity = warning    # Exclude private assets as project file dependency
dotnet_diagnostic.Proj1700.severity = warning    # Indent XML files
dotnet_diagnostic.Proj1701.severity = warning    # Use <![CDATA[ for large texts
dotnet_diagnostic.Proj1702.severity = warning    # Omit XML declarations
dotnet_diagnostic.Proj2001.severity = warning    # Define data in a resource file
dotnet_diagnostic.Proj2002.severity = warning    # Sort resource file values alphabetically
dotnet_diagnostic.Proj2003.severity = warning    # Add invariant fallback resources
dotnet_diagnostic.Proj2004.severity = warning    # Add invariant fallback values
dotnet_diagnostic.Proj2100.severity = warning    # Indent XML files

dotnet_diagnostic.Proj0017.severity = error      # Can't create alias for static using directive
dotnet_diagnostic.Proj2000.severity = error      # Embed valid resource files

dotnet_diagnostic.QW0004.severity   = warning    # Characters with Trojan Horse potential are not allowed
dotnet_diagnostic.QW0005.severity   = warning    # Seal concrete classes unless designed for inheritance
dotnet_diagnostic.QW0006.severity   = warning    # Only unsealed concrete classes should be decorated as inheritable
dotnet_diagnostic.QW0007.severity   = warning    # Use file-scoped namespace declarations
dotnet_diagnostic.QW0008.severity   = warning    # Define properties as not-nullable for types with a defined empty state
dotnet_diagnostic.QW0009.severity   = warning    # Define properties as not-nullable for enums with a defined none/empty value
dotnet_diagnostic.QW0010.severity   = warning    # Use System.DateOnly instead of Qowaiv.Date
dotnet_diagnostic.QW0011.severity   = warning    # Define properties as immutables
dotnet_diagnostic.QW0012.severity   = warning    # Use immutable types for properties
dotnet_diagnostic.QW0013.severity   = warning    # Use Qowaiv decimal rounding
dotnet_diagnostic.QW0014.severity   = warning    # Define global using statements separately
dotnet_diagnostic.QW0015.severity   = warning    # Define global using statements in single file
dotnet_diagnostic.QW0016.severity   = warning    # Prefer regular over positional properties

dotnet_diagnostic.S103.severity     = none       # Lines should not be too long
dotnet_diagnostic.S104.severity     = none       # Files should not have too many lines of code
dotnet_diagnostic.S106.severity     = none       # Standard outputs should not be used directly to log anything
dotnet_diagnostic.S109.severity     = none       # Magic numbers should not be used
dotnet_diagnostic.S110.severity     = none       # Inheritance tree of classes should not be too deep
dotnet_diagnostic.S121.severity     = none       # Control structures should use curly braces
dotnet_diagnostic.S122.severity     = none       # Statements should be on separate lines
dotnet_diagnostic.S126.severity     = none       # "if ... else if" constructs should end with "else" clauses
dotnet_diagnostic.S131.severity     = none       # "switch/Select" statements should contain a "default/Case Else" clauses
dotnet_diagnostic.S134.severity     = none       # Control flow statements "if", "switch", "for", "foreach", "while", "do"  and "try" should not be nested too deeply
dotnet_diagnostic.S138.severity     = none       # Functions should not have too many lines of code
dotnet_diagnostic.S881.severity     = none       # Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression
dotnet_diagnostic.S1067.severity    = none       # Expressions should not be too complex
dotnet_diagnostic.S1109.severity    = none       # A close curly brace should be located at the beginning of a line
dotnet_diagnostic.S1128.severity    = none       # Unnecessary "using" should be removed
dotnet_diagnostic.S1147.severity    = none       # Exit methods should not be called
dotnet_diagnostic.S1151.severity    = none       # "switch case" clauses should not have too many lines of code
dotnet_diagnostic.S1192.severity    = none       # String literals should not be duplicated
dotnet_diagnostic.S1200.severity    = none       # Classes should not be coupled to too many other classes
dotnet_diagnostic.S1226.severity    = none       # Method parameters, caught exceptions and foreach variables' initial values should not be ignored
dotnet_diagnostic.S1227.severity    = none       # break statements should not be used except for switch cases
dotnet_diagnostic.S1301.severity    = none       # "switch" statements should have at least 3 "case" clauses
dotnet_diagnostic.S1309.severity    = none       # Track uses of in-source issue suppressions
dotnet_diagnostic.S1312.severity    = none       # Logger fields should be "private static readonly"
dotnet_diagnostic.S1449.severity    = none       # Culture should be specified for "string" operations
dotnet_diagnostic.S1451.severity    = none       # Track lack of copyright and license headers
dotnet_diagnostic.S1541.severity    = none       # Methods and properties should not be too complex
dotnet_diagnostic.S1659.severity    = none       # Multiple variables should not be declared on the same line
dotnet_diagnostic.S1698.severity    = none       # "==" should not be used when "Equals" is overridden
dotnet_diagnostic.S1821.severity    = none       # "switch" statements should not be nested
dotnet_diagnostic.S2197.severity    = none       # Modulus results should not be checked for direct equality
dotnet_diagnostic.S2221.severity    = none       # "Exception" should not be caught
dotnet_diagnostic.S2327.severity    = none       # "try" statements with identical "catch" and/or "finally" blocks should be merged
dotnet_diagnostic.S2330.severity    = none       # Array covariance should not be used
dotnet_diagnostic.S2339.severity    = none       # Public constant members should not be used
dotnet_diagnostic.S2357.severity    = none       # Fields should be private
dotnet_diagnostic.S2360.severity    = none       # Optional parameters should not be used
dotnet_diagnostic.S2387.severity    = none       # Child class fields should not shadow parent class fields
dotnet_diagnostic.S2760.severity    = none       # Sequential tests should not check the same condition
dotnet_diagnostic.S2931.severity    = none       # Classes with "IDisposable" members should implement "IDisposable"
dotnet_diagnostic.S2952.severity    = none       # Classes should "Dispose" of members from the classes' own "Dispose" methods
dotnet_diagnostic.S3052.severity    = none       # Members should not be initialized to default values
dotnet_diagnostic.S3059.severity    = none       # Types should not have members with visibility set higher than the type's visibility
dotnet_diagnostic.S3216.severity    = none       # "ConfigureAwait(false)" should be used
dotnet_diagnostic.S3234.severity    = none       # "GC.SuppressFinalize" should not be invoked for types without destructors
dotnet_diagnostic.S3235.severity    = none       # Redundant parentheses should not be used
dotnet_diagnostic.S3240.severity    = none       # The simplest possible condition syntax should be used
dotnet_diagnostic.S3242.severity    = none       # Method parameters should be declared with base types
dotnet_diagnostic.S3253.severity    = none       # Constructor and destructor declarations should not be redundant
dotnet_diagnostic.S3254.severity    = none       # Default parameter values should not be passed as arguments
dotnet_diagnostic.S3366.severity    = none       # "this" should not be exposed from constructors
dotnet_diagnostic.S3416.severity    = none       # Loggers should be named for their enclosing types
dotnet_diagnostic.S3441.severity    = none       # Redundant property names should be omitted in anonymous classes
dotnet_diagnostic.S3532.severity    = none       # Empty "default" clauses should be removed
dotnet_diagnostic.S3872.severity    = none       # Parameter names should not duplicate the names of their methods
dotnet_diagnostic.S3874.severity    = none       # "out" and "ref" parameters should not be used
dotnet_diagnostic.S3876.severity    = none       # Strings or integral types should be used for indexers
dotnet_diagnostic.S3880.severity    = none       # Finalizers should not be empty
dotnet_diagnostic.S3884.severity    = none       # "CoSetProxyBlanket" and "CoInitializeSecurity" should not be used
dotnet_diagnostic.S3898.severity    = none       # Value types should implement "IEquatable<T>"
dotnet_diagnostic.S3900.severity    = none       # Arguments of public methods should be validated against null
dotnet_diagnostic.S3902.severity    = none       # "Assembly.GetExecutingAssembly" should not be called
dotnet_diagnostic.S3906.severity    = none       # Event Handlers should have the correct signature
dotnet_diagnostic.S3908.severity    = none       # Generic event handlers should be used
dotnet_diagnostic.S3909.severity    = none       # Collections should implement the generic interface
dotnet_diagnostic.S3937.severity    = none       # Number patterns should be regular
dotnet_diagnostic.S3956.severity    = none       # "Generic.List" instances should not be part of public APIs
dotnet_diagnostic.S3962.severity    = none       # "static readonly" constants should be "const" instead
dotnet_diagnostic.S3967.severity    = none       # Multidimensional arrays should not be used
dotnet_diagnostic.S3990.severity    = none       # Assemblies should be marked as CLS compliant
dotnet_diagnostic.S3992.severity    = none       # Assemblies should explicitly specify COM visibility
dotnet_diagnostic.S3994.severity    = none       # URI Parameters should not be strings
dotnet_diagnostic.S3995.severity    = none       # URI return values should not be strings
dotnet_diagnostic.S3996.severity    = none       # URI properties should not be strings
dotnet_diagnostic.S3997.severity    = none       # String URI overloads should call "System.Uri" overloads
dotnet_diagnostic.S4000.severity    = none       # Pointers to unmanaged memory should not be visible
dotnet_diagnostic.S4002.severity    = none       # Disposable types should declare finalizers
dotnet_diagnostic.S4004.severity    = none       # Collection properties should be readonly
dotnet_diagnostic.S4005.severity    = none       # "System.Uri" arguments should be used instead of strings
dotnet_diagnostic.S4016.severity    = none       # Enumeration members should not be named "Reserved"
dotnet_diagnostic.S4017.severity    = none       # Method signatures should not contain nested generic types
dotnet_diagnostic.S4018.severity    = none       # All type parameters should be used in the parameter list to enable type inference
dotnet_diagnostic.S4022.severity    = none       # Enumerations should have "Int32" storage
dotnet_diagnostic.S4023.severity    = none       # Interfaces should not be empty
dotnet_diagnostic.S4025.severity    = none       # Child class fields should not differ from parent class fields only by capitalization
dotnet_diagnostic.S4027.severity    = none       # Exceptions should provide standard constructors
dotnet_diagnostic.S4039.severity    = none       # Interface methods should be callable by derived types
dotnet_diagnostic.S4040.severity    = none       # Strings should be normalized to uppercase
dotnet_diagnostic.S4041.severity    = none       # Type names should not match namespaces
dotnet_diagnostic.S4047.severity    = none       # Generics should be used when appropriate
dotnet_diagnostic.S4049.severity    = none       # Properties should be preferred
dotnet_diagnostic.S4055.severity    = none       # Literals should not be passed as localized parameters
dotnet_diagnostic.S4056.severity    = none       # Overloads with a "CultureInfo" or an "IFormatProvider" parameter should be used
dotnet_diagnostic.S4057.severity    = none       # Locales should be set for data types
dotnet_diagnostic.S4058.severity    = none       # Overloads with a "StringComparison" parameter should be used
dotnet_diagnostic.S4059.severity    = none       # Property names should not match get methods
dotnet_diagnostic.S4060.severity    = none       # Non-abstract attributes should be sealed
dotnet_diagnostic.S4069.severity    = none       # Operator overloads should have named alternatives
dotnet_diagnostic.S4212.severity    = none       # Serialization constructors should be secured
dotnet_diagnostic.S4214.severity    = none       # "P/Invoke" methods should not be visible
dotnet_diagnostic.S4225.severity    = none       # Extension methods should not extend "object"
dotnet_diagnostic.S4226.severity    = none       # Extensions should be in separate namespaces
dotnet_diagnostic.S4261.severity    = none       # Methods should be named according to their synchronicities
dotnet_diagnostic.S6421.severity    = none       # Azure Functions should use Structured Error Handling
dotnet_diagnostic.S6423.severity    = none       # Azure Functions should log all failures
dotnet_diagnostic.S6507.severity    = none       # Blocks should not be synchronized on local variables
dotnet_diagnostic.S6563.severity    = none       # Use UTC when recording DateTime instants
dotnet_diagnostic.S6566.severity    = none       # Use "DateTimeOffset" instead of "DateTime"
dotnet_diagnostic.S6585.severity    = none       # Don't hardcode the format when turning dates and times to strings
dotnet_diagnostic.S6664.severity    = none       # The code block contains too many logging calls
dotnet_diagnostic.S6669.severity    = none       # Logger field or property name should comply with a naming convention
dotnet_diagnostic.S6802.severity    = none       # Using lambda expressions in loops should be avoided in Blazor markup section
dotnet_diagnostic.S6803.severity    = none       # Parameters with SupplyParameterFromQuery attribute should be used only in routable components

dotnet_diagnostic.S2437.severity    = info       # Unnecessary bit operations should not be performed

dotnet_diagnostic.S108.severity     = warning    # Nested blocks of code should not be left empty
dotnet_diagnostic.S112.severity     = warning    # General or reserved exceptions should never be thrown
dotnet_diagnostic.S125.severity     = warning    # Sections of code should not be commented out
dotnet_diagnostic.S127.severity     = warning    # "for" loop stop conditions should be invariant
dotnet_diagnostic.S818.severity     = warning    # Literal suffixes should be upper case
dotnet_diagnostic.S907.severity     = warning    # "goto" statement should not be used
dotnet_diagnostic.S927.severity     = warning    # Parameter names should match base declaration and other partial definitions
dotnet_diagnostic.S1006.severity    = warning    # Method overrides should not change parameter defaults
dotnet_diagnostic.S1048.severity    = warning    # Finalizers should not throw exceptions
dotnet_diagnostic.S1066.severity    = warning    # Mergeable "if" statements should be combined
dotnet_diagnostic.S1075.severity    = warning    # URIs should not be hardcoded
dotnet_diagnostic.S1104.severity    = warning    # Fields should not have public accessibility
dotnet_diagnostic.S1110.severity    = warning    # Redundant pairs of parentheses should be removed
dotnet_diagnostic.S1116.severity    = warning    # Empty statements should be removed
dotnet_diagnostic.S1117.severity    = warning    # Local variables should not shadow class fields or properties
dotnet_diagnostic.S1118.severity    = warning    # Utility classes should not have public constructors
dotnet_diagnostic.S1121.severity    = warning    # Assignments should not be made from within sub-expressions
dotnet_diagnostic.S1123.severity    = warning    # "Obsolete" attributes should include explanations
dotnet_diagnostic.S1125.severity    = warning    # Boolean literals should not be redundant
dotnet_diagnostic.S1133.severity    = warning    # Deprecated code should be removed
dotnet_diagnostic.S1134.severity    = warning    # Track uses of "FIXME" tags
dotnet_diagnostic.S1135.severity    = warning    # Track uses of "TODO" tags
dotnet_diagnostic.S1144.severity    = warning    # Unused private types or members should be removed
dotnet_diagnostic.S1155.severity    = warning    # "Any()" should be used to test for emptiness
dotnet_diagnostic.S1163.severity    = warning    # Exceptions should not be thrown in finally blocks
dotnet_diagnostic.S1168.severity    = warning    # Empty arrays and collections should be returned instead of null
dotnet_diagnostic.S1172.severity    = warning    # Unused method parameters should be removed
dotnet_diagnostic.S1185.severity    = warning    # Overriding members should do more than simply call the same member in the base class
dotnet_diagnostic.S1186.severity    = warning    # Methods should not be empty
dotnet_diagnostic.S1199.severity    = warning    # Nested code blocks should not be used
dotnet_diagnostic.S1206.severity    = warning    # "Equals(Object)" and "GetHashCode()" should be overridden in pairs
dotnet_diagnostic.S1210.severity    = warning    # "Equals" and the comparison operators should be overridden when implementing "IComparable"
dotnet_diagnostic.S1215.severity    = warning    # "GC.Collect" should not be called
dotnet_diagnostic.S1244.severity    = warning    # Floating point numbers should not be tested for equality
dotnet_diagnostic.S1264.severity    = warning    # A "while" loop should be used instead of a "for" loop
dotnet_diagnostic.S1313.severity    = warning    # Using hardcoded IP addresses is security-sensitive
dotnet_diagnostic.S1450.severity    = warning    # Private fields only used as local variables in methods should become local variables
dotnet_diagnostic.S1481.severity    = warning    # Unused local variables should be removed
dotnet_diagnostic.S1607.severity    = warning    # Tests should not be ignored
dotnet_diagnostic.S1643.severity    = warning    # Strings should not be concatenated using '+' in a loop
dotnet_diagnostic.S1656.severity    = warning    # Variables should not be self-assigned
dotnet_diagnostic.S1696.severity    = warning    # NullReferenceException should not be caught
dotnet_diagnostic.S1699.severity    = warning    # Constructors should only call non-overridable methods
dotnet_diagnostic.S1751.severity    = warning    # Loops with at most one iteration should be refactored
dotnet_diagnostic.S1764.severity    = warning    # Identical expressions should not be used on both sides of operators
dotnet_diagnostic.S1848.severity    = warning    # Objects should not be created to be dropped immediately without being used
dotnet_diagnostic.S1854.severity    = warning    # Unused assignments should be removed
dotnet_diagnostic.S1862.severity    = warning    # Related "if/else if" statements should not have the same condition
dotnet_diagnostic.S1871.severity    = warning    # Two branches in a conditional structure should not have exactly the same implementation
dotnet_diagnostic.S1905.severity    = warning    # Redundant casts should not be used
dotnet_diagnostic.S1939.severity    = warning    # Inheritance list should not be redundant
dotnet_diagnostic.S1940.severity    = warning    # Boolean checks should not be inverted
dotnet_diagnostic.S1944.severity    = warning    # Invalid casts should be avoided
dotnet_diagnostic.S1994.severity    = warning    # "for" loop increment clauses should modify the loops' counters
dotnet_diagnostic.S2053.severity    = warning    # Password hashing functions should use an unpredictable salt
dotnet_diagnostic.S2068.severity    = warning    # Hard-coded credentials are security-sensitive
dotnet_diagnostic.S2077.severity    = warning    # Formatting SQL queries is security-sensitive
dotnet_diagnostic.S2092.severity    = warning    # Creating cookies without the "secure" flag is security-sensitive
dotnet_diagnostic.S2094.severity    = warning    # Classes should not be empty
dotnet_diagnostic.S2114.severity    = warning    # Collections should not be passed as arguments to their own methods
dotnet_diagnostic.S2115.severity    = warning    # A secure password should be used when connecting to a database
dotnet_diagnostic.S2123.severity    = warning    # Values should not be uselessly incremented
dotnet_diagnostic.S2139.severity    = warning    # Exceptions should be either logged or rethrown but not both
dotnet_diagnostic.S2166.severity    = warning    # Classes named like "Exception" should extend "Exception" or a subclass
dotnet_diagnostic.S2178.severity    = warning    # Short-circuit logic should be used in boolean contexts
dotnet_diagnostic.S2183.severity    = warning    # Integral numbers should not be shifted by zero or more than their number of bits-1
dotnet_diagnostic.S2184.severity    = warning    # Results of integer division should not be assigned to floating point variables
dotnet_diagnostic.S2187.severity    = warning    # Test classes should contain at least one test case
dotnet_diagnostic.S2190.severity    = warning    # Loops and recursions should not be infinite
dotnet_diagnostic.S2198.severity    = warning    # Unnecessary mathematical comparisons should not be made
dotnet_diagnostic.S2201.severity    = warning    # Methods without side effects should not have their return values ignored
dotnet_diagnostic.S2219.severity    = warning    # Runtime type checking should be simplified
dotnet_diagnostic.S2222.severity    = warning    # Locks should be released on all paths
dotnet_diagnostic.S2223.severity    = warning    # Non-constant static fields should not be visible
dotnet_diagnostic.S2225.severity    = warning    # "ToString()" method should not return null
dotnet_diagnostic.S2234.severity    = warning    # Arguments should be passed in the same order as the method parameters
dotnet_diagnostic.S2245.severity    = warning    # Using pseudorandom number generators (PRNGs) is security-sensitive
dotnet_diagnostic.S2251.severity    = warning    # A "for" loop update clause should move the counter in the right direction
dotnet_diagnostic.S2252.severity    = warning    # For-loop conditions should be true at least once
dotnet_diagnostic.S2257.severity    = warning    # Using non-standard cryptographic algorithms is security-sensitive
dotnet_diagnostic.S2259.severity    = warning    # Null pointers should not be dereferenced
dotnet_diagnostic.S2275.severity    = warning    # Composite format strings should not lead to unexpected behavior at runtime
dotnet_diagnostic.S2290.severity    = warning    # Field-like events should not be virtual
dotnet_diagnostic.S2291.severity    = warning    # Overflow checking should not be disabled for "Enumerable.Sum"
dotnet_diagnostic.S2292.severity    = warning    # Trivial properties should be auto-implemented
dotnet_diagnostic.S2306.severity    = warning    # "async" and "await" should not be used as identifiers
dotnet_diagnostic.S2325.severity    = warning    # Methods and properties that don't access instance data should be static
dotnet_diagnostic.S2326.severity    = warning    # Unused type parameters should be removed
dotnet_diagnostic.S2328.severity    = warning    # "GetHashCode" should not reference mutable fields
dotnet_diagnostic.S2344.severity    = warning    # Enumeration type names should not have "Flags" or "Enum" suffixes
dotnet_diagnostic.S2345.severity    = warning    # Flags enumerations should explicitly initialize all their members
dotnet_diagnostic.S2346.severity    = warning    # Flags enumerations zero-value members should be named "None"
dotnet_diagnostic.S2365.severity    = warning    # Properties should not make collection or array copies
dotnet_diagnostic.S2368.severity    = warning    # Public methods should not have multidimensional array parameters
dotnet_diagnostic.S2372.severity    = warning    # Exceptions should not be thrown from property getters
dotnet_diagnostic.S2376.severity    = warning    # Write-only properties should not be used
dotnet_diagnostic.S2386.severity    = warning    # Mutable fields should not be "public static"
dotnet_diagnostic.S2445.severity    = warning    # Blocks should be synchronized on read-only fields
dotnet_diagnostic.S2479.severity    = warning    # Whitespace and control characters in string literals should be explicit
dotnet_diagnostic.S2486.severity    = warning    # Generic exceptions should not be ignored
dotnet_diagnostic.S2551.severity    = warning    # Shared resources should not be used for locking
dotnet_diagnostic.S2583.severity    = warning    # Conditionally executed code should be reachable
dotnet_diagnostic.S2589.severity    = warning    # Boolean expressions should not be gratuitous
dotnet_diagnostic.S2612.severity    = warning    # Setting loose file permissions is security-sensitive
dotnet_diagnostic.S2629.severity    = warning    # Logging templates should be constant
dotnet_diagnostic.S2674.severity    = warning    # The length returned from a stream read should be checked
dotnet_diagnostic.S2681.severity    = warning    # Multiline blocks should be enclosed in curly braces
dotnet_diagnostic.S2688.severity    = warning    # "NaN" should not be used in comparisons
dotnet_diagnostic.S2692.severity    = warning    # "IndexOf" checks should not be for positive numbers
dotnet_diagnostic.S2696.severity    = warning    # Instance members should not write to "static" fields
dotnet_diagnostic.S2699.severity    = warning    # Tests should include assertions
dotnet_diagnostic.S2701.severity    = warning    # Literal boolean values should not be used in assertions
dotnet_diagnostic.S2737.severity    = warning    # "catch" clauses should do more than rethrow
dotnet_diagnostic.S2743.severity    = warning    # Static fields should not be used in generic types
dotnet_diagnostic.S2755.severity    = warning    # XML parsers should not be vulnerable to XXE attacks
dotnet_diagnostic.S2757.severity    = warning    # Non-existent operators like "=+" should not be used
dotnet_diagnostic.S2761.severity    = warning    # Doubled prefix operators "!!" and "~~" should not be used
dotnet_diagnostic.S2857.severity    = warning    # SQL keywords should be delimited by whitespace
dotnet_diagnostic.S2925.severity    = warning    # "Thread.Sleep" should not be used in tests
dotnet_diagnostic.S2930.severity    = warning    # "IDisposables" should be disposed
dotnet_diagnostic.S2933.severity    = warning    # Fields that are only assigned in the constructor should be "readonly"
dotnet_diagnostic.S2934.severity    = warning    # Property assignments should not be made for "readonly" fields not constrained to reference types
dotnet_diagnostic.S2953.severity    = warning    # Methods named "Dispose" should implement "IDisposable.Dispose"
dotnet_diagnostic.S2955.severity    = warning    # Generic parameters not constrained to reference types should not be compared to "null"
dotnet_diagnostic.S2970.severity    = warning    # Assertions should be complete
dotnet_diagnostic.S2971.severity    = warning    # LINQ expressions should be simplified
dotnet_diagnostic.S2995.severity    = warning    # "Object.ReferenceEquals" should not be used for value types
dotnet_diagnostic.S2996.severity    = warning    # "ThreadStatic" fields should not be initialized
dotnet_diagnostic.S2997.severity    = warning    # "IDisposables" created in a "using" statement should not be returned
dotnet_diagnostic.S3005.severity    = warning    # "ThreadStatic" should not be used on non-static fields
dotnet_diagnostic.S3010.severity    = warning    # Static fields should not be updated in constructors
dotnet_diagnostic.S3011.severity    = warning    # Reflection should not be used to increase accessibility of classes, methods, or fields
dotnet_diagnostic.S3060.severity    = warning    # "is" should not be used with "this"
dotnet_diagnostic.S3063.severity    = warning    # "StringBuilder" data should be used
dotnet_diagnostic.S3168.severity    = warning    # "async" methods should not return "void"
dotnet_diagnostic.S3169.severity    = warning    # Multiple "OrderBy" calls should not be used
dotnet_diagnostic.S3172.severity    = warning    # Delegates should not be subtracted
dotnet_diagnostic.S3217.severity    = warning    # "Explicit" conversions of "foreach" loops should not be used
dotnet_diagnostic.S3218.severity    = warning    # Inner class members should not shadow outer class "static" or type members
dotnet_diagnostic.S3220.severity    = warning    # Method calls should not resolve ambiguously to overloads with "params"
dotnet_diagnostic.S3236.severity    = warning    # Caller information arguments should not be provided explicitly
dotnet_diagnostic.S3237.severity    = warning    # "value" contextual keyword should be used
dotnet_diagnostic.S3241.severity    = warning    # Methods should not return values that are never used
dotnet_diagnostic.S3244.severity    = warning    # Anonymous delegates should not be used to unsubscribe from Events
dotnet_diagnostic.S3246.severity    = warning    # Generic type parameters should be co/contravariant when possible
dotnet_diagnostic.S3247.severity    = warning    # Duplicate casts should not be made
dotnet_diagnostic.S3249.severity    = warning    # Classes directly extending "object" should not call "base" in "GetHashCode" or "Equals"
dotnet_diagnostic.S3251.severity    = warning    # Implementations should be provided for "partial" methods
dotnet_diagnostic.S3256.severity    = warning    # "string.IsNullOrEmpty" should be used
dotnet_diagnostic.S3260.severity    = warning    # Non-derived "private" classes and records should be "sealed"
dotnet_diagnostic.S3261.severity    = warning    # Namespaces should not be empty
dotnet_diagnostic.S3262.severity    = warning    # "params" should be used on overrides
dotnet_diagnostic.S3263.severity    = warning    # Static fields should appear in the order they must be initialized 
dotnet_diagnostic.S3264.severity    = warning    # Events should be invoked
dotnet_diagnostic.S3265.severity    = warning    # Non-flags enums should not be used in bitwise operations
dotnet_diagnostic.S3267.severity    = warning    # Loops should be simplified with "LINQ" expressions
dotnet_diagnostic.S3329.severity    = warning    # Cipher Block Chaining IVs should be unpredictable
dotnet_diagnostic.S3330.severity    = warning    # Creating cookies without the "HttpOnly" flag is security-sensitive
dotnet_diagnostic.S3343.severity    = warning    # Caller information parameters should come at the end of the parameter list
dotnet_diagnostic.S3346.severity    = warning    # Expressions used in "Debug.Assert" should not produce side effects
dotnet_diagnostic.S3358.severity    = warning    # Ternary operators should not be nested
dotnet_diagnostic.S3363.severity    = warning    # Date and time should not be used as a type for primary keys
dotnet_diagnostic.S3397.severity    = warning    # "base.Equals" should not be used to check for reference equality in "Equals" if "base" is not "object"
dotnet_diagnostic.S3398.severity    = warning    # "private" methods called only by inner classes should be moved to those classes
dotnet_diagnostic.S3400.severity    = warning    # Methods should not return constants
dotnet_diagnostic.S3415.severity    = warning    # Assertion arguments should be passed in the correct order
dotnet_diagnostic.S3427.severity    = warning    # Method overloads with default parameter values should not overlap
dotnet_diagnostic.S3431.severity    = warning    # "[ExpectedException]" should not be used
dotnet_diagnostic.S3433.severity    = warning    # Test method signatures should be correct
dotnet_diagnostic.S3440.severity    = warning    # Variables should not be checked against the values they're about to be assigned
dotnet_diagnostic.S3442.severity    = warning    # "abstract" classes should not have "public" constructors
dotnet_diagnostic.S3443.severity    = warning    # Type should not be examined on "System.Type" instances
dotnet_diagnostic.S3444.severity    = warning    # Interfaces should not simply inherit from base interfaces with colliding members
dotnet_diagnostic.S3445.severity    = warning    # Exceptions should not be explicitly rethrown
dotnet_diagnostic.S3447.severity    = warning    # "[Optional]" should not be used on "ref" or "out" parameters
dotnet_diagnostic.S3449.severity    = warning    # Right operands of shift operators should be integers
dotnet_diagnostic.S3450.severity    = warning    # Parameters with "[DefaultParameterValue]" attributes should also be marked "[Optional]"
dotnet_diagnostic.S3451.severity    = warning    # "[DefaultValue]" should not be used when "[DefaultParameterValue]" is meant
dotnet_diagnostic.S3453.severity    = warning    # Classes should not have only "private" constructors
dotnet_diagnostic.S3456.severity    = warning    # "string.ToCharArray()" and "ReadOnlySpan<T>.ToArray()" should not be called redundantly
dotnet_diagnostic.S3457.severity    = warning    # Composite format strings should be used correctly
dotnet_diagnostic.S3458.severity    = warning    # Empty "case" clauses that fall through to the "default" should be omitted
dotnet_diagnostic.S3459.severity    = warning    # Unassigned members should be removed
dotnet_diagnostic.S3464.severity    = warning    # Type inheritance should not be recursive
dotnet_diagnostic.S3466.severity    = warning    # Optional parameters should be passed to "base" calls
dotnet_diagnostic.S3597.severity    = warning    # "ServiceContract" and "OperationContract" attributes should be used together
dotnet_diagnostic.S3598.severity    = warning    # One-way "OperationContract" methods should have "void" return type
dotnet_diagnostic.S3600.severity    = warning    # "params" should not be introduced on overrides
dotnet_diagnostic.S3603.severity    = warning    # Methods with "Pure" attribute should return a value 
dotnet_diagnostic.S3604.severity    = warning    # Member initializer values should not be redundant
dotnet_diagnostic.S3610.severity    = warning    # Nullable type comparison should not be redundant
dotnet_diagnostic.S3626.severity    = warning    # Jump statements should not be redundant
dotnet_diagnostic.S3655.severity    = warning    # Empty nullable value should not be accessed
dotnet_diagnostic.S3869.severity    = warning    # "SafeHandle.DangerousGetHandle" should not be called
dotnet_diagnostic.S3871.severity    = warning    # Exception types should be "public"
dotnet_diagnostic.S3875.severity    = warning    # "operator==" should not be overloaded on reference types
dotnet_diagnostic.S3877.severity    = warning    # Exceptions should not be thrown from unexpected methods
dotnet_diagnostic.S3878.severity    = warning    # Arrays should not be created for params parameters
dotnet_diagnostic.S3881.severity    = warning    # "IDisposable" should be implemented correctly
dotnet_diagnostic.S3885.severity    = warning    # "Assembly.Load" should be used
dotnet_diagnostic.S3887.severity    = warning    # Mutable, non-private fields should not be "readonly"
dotnet_diagnostic.S3889.severity    = warning    # "Thread.Resume" and "Thread.Suspend" should not be used
dotnet_diagnostic.S3897.severity    = warning    # Classes that provide "Equals(<T>)" should implement "IEquatable<T>"
dotnet_diagnostic.S3903.severity    = warning    # Types should be defined in named namespaces
dotnet_diagnostic.S3904.severity    = warning    # Assemblies should have version information
dotnet_diagnostic.S3923.severity    = warning    # All branches in a conditional structure should not have exactly the same implementation
dotnet_diagnostic.S3926.severity    = warning    # Deserialization methods should be provided for "OptionalField" members
dotnet_diagnostic.S3927.severity    = warning    # Serialization event handlers should be implemented correctly
dotnet_diagnostic.S3928.severity    = warning    # Parameter names used into ArgumentException constructors should match an existing one 
dotnet_diagnostic.S3949.severity    = warning    # Calculations should not overflow
dotnet_diagnostic.S3963.severity    = warning    # "static" fields should be initialized inline
dotnet_diagnostic.S3966.severity    = warning    # Objects should not be disposed more than once
dotnet_diagnostic.S3971.severity    = warning    # "GC.SuppressFinalize" should not be called
dotnet_diagnostic.S3972.severity    = warning    # Conditionals should start on new lines
dotnet_diagnostic.S3973.severity    = warning    # A conditionally executed single line should be denoted by indentation
dotnet_diagnostic.S3981.severity    = warning    # Collection sizes and array length comparisons should make sense
dotnet_diagnostic.S3984.severity    = warning    # Exceptions should not be created without being thrown
dotnet_diagnostic.S3993.severity    = warning    # Custom attributes should be marked with "System.AttributeUsageAttribute"
dotnet_diagnostic.S3998.severity    = warning    # Threads should not lock on objects with weak identity
dotnet_diagnostic.S4015.severity    = warning    # Inherited member visibility should not be decreased
dotnet_diagnostic.S4019.severity    = warning    # Base class methods should not be hidden
dotnet_diagnostic.S4035.severity    = warning    # Classes implementing "IEquatable<T>" should be sealed
dotnet_diagnostic.S4036.severity    = warning    # Searching OS commands in PATH is security-sensitive
dotnet_diagnostic.S4050.severity    = warning    # Operators should be overloaded consistently
dotnet_diagnostic.S4052.severity    = warning    # Types should not extend outdated base types
dotnet_diagnostic.S4061.severity    = warning    # "params" should be used instead of "varargs"
dotnet_diagnostic.S4070.severity    = warning    # Non-flags enums should not be marked with "FlagsAttribute"
dotnet_diagnostic.S4136.severity    = warning    # Method overloads should be grouped together
dotnet_diagnostic.S4143.severity    = warning    # Collection elements should not be replaced unconditionally
dotnet_diagnostic.S4144.severity    = warning    # Methods should not have identical implementations
dotnet_diagnostic.S4158.severity    = warning    # Empty collections should not be accessed or iterated
dotnet_diagnostic.S4159.severity    = warning    # Classes should implement their "ExportAttribute" interfaces
dotnet_diagnostic.S4200.severity    = warning    # Native methods should be wrapped
dotnet_diagnostic.S4201.severity    = warning    # Null checks should not be combined with "is" operator checks
dotnet_diagnostic.S4210.severity    = warning    # Windows Forms entry points should be marked with STAThread
dotnet_diagnostic.S4211.severity    = warning    # Members should not have conflicting transparency annotations
dotnet_diagnostic.S4220.severity    = warning    # Events should have proper arguments
dotnet_diagnostic.S4260.severity    = warning    # "ConstructorArgument" parameters should exist in constructors
dotnet_diagnostic.S4275.severity    = warning    # Getters and setters should access the expected fields
dotnet_diagnostic.S4277.severity    = warning    # "Shared" parts should not be created with "new"
dotnet_diagnostic.S4347.severity    = warning    # Secure random number generators should not output predictable values
dotnet_diagnostic.S4423.severity    = warning    # Weak SSL/TLS protocols should not be used
dotnet_diagnostic.S4426.severity    = warning    # Cryptographic keys should be robust
dotnet_diagnostic.S4428.severity    = warning    # "PartCreationPolicyAttribute" should be used with "ExportAttribute"
dotnet_diagnostic.S4433.severity    = warning    # LDAP connections should be authenticated
dotnet_diagnostic.S4456.severity    = warning    # Parameter validation in yielding methods should be wrapped
dotnet_diagnostic.S4487.severity    = warning    # Unread "private" fields should be removed
dotnet_diagnostic.S4502.severity    = warning    # Disabling CSRF protections is security-sensitive
dotnet_diagnostic.S4507.severity    = warning    # Delivering code in production with debug features activated is security-sensitive
dotnet_diagnostic.S4524.severity    = warning    # "default" clauses should be first or last
dotnet_diagnostic.S4545.severity    = warning    # "DebuggerDisplayAttribute" strings should reference existing members
dotnet_diagnostic.S4581.severity    = warning    # "new Guid()" should not be used
dotnet_diagnostic.S4583.severity    = warning    # Calls to delegate's method "BeginInvoke" should be paired with calls to "EndInvoke"
dotnet_diagnostic.S4586.severity    = warning    # Non-async "Task/Task<T>" methods should not return null
dotnet_diagnostic.S4635.severity    = warning    # Start index should be used instead of calling Substring
dotnet_diagnostic.S4663.severity    = warning    # Comments should not be empty
dotnet_diagnostic.S4790.severity    = warning    # Using weak hashing algorithms is security-sensitive
dotnet_diagnostic.S4792.severity    = warning    # Configuring loggers is security-sensitive
dotnet_diagnostic.S4830.severity    = warning    # Server certificates should be verified during SSL/TLS connections
dotnet_diagnostic.S5034.severity    = warning    # "ValueTask" should be consumed correctly
dotnet_diagnostic.S5042.severity    = warning    # Expanding archive files without controlling resource consumption is security-sensitive
dotnet_diagnostic.S5122.severity    = warning    # Having a permissive Cross-Origin Resource Sharing policy is security-sensitive
dotnet_diagnostic.S5332.severity    = warning    # Using clear-text protocols is security-sensitive
dotnet_diagnostic.S5344.severity    = warning    # Passwords should not be stored in plaintext or with a fast hashing algorithm
dotnet_diagnostic.S5443.severity    = warning    # Using publicly writable directories is security-sensitive
dotnet_diagnostic.S5445.severity    = warning    # Insecure temporary file creation methods should not be used
dotnet_diagnostic.S5542.severity    = warning    # Encryption algorithms should be used with secure mode and padding scheme
dotnet_diagnostic.S5547.severity    = warning    # Cipher algorithms should be robust
dotnet_diagnostic.S5659.severity    = warning    # JWT should be signed and verified with strong cipher algorithms
dotnet_diagnostic.S5693.severity    = warning    # Allowing requests with excessive content length is security-sensitive
dotnet_diagnostic.S5753.severity    = warning    # Disabling ASP.NET "Request Validation" feature is security-sensitive
dotnet_diagnostic.S5766.severity    = warning    # Deserializing objects without performing data validation is security-sensitive
dotnet_diagnostic.S5773.severity    = warning    # Types allowed to be deserialized should be restricted
dotnet_diagnostic.S5856.severity    = warning    # Regular expressions should be syntactically valid
dotnet_diagnostic.S6377.severity    = warning    # XML signatures should be validated securely
dotnet_diagnostic.S6419.severity    = warning    # Azure Functions should be stateless
dotnet_diagnostic.S6420.severity    = warning    # Client instances should not be recreated on each Azure Function invocation
dotnet_diagnostic.S6422.severity    = warning    # Calls to "async" methods should not be blocking in Azure Functions
dotnet_diagnostic.S6424.severity    = warning    # Interfaces for durable entities should satisfy the restrictions
dotnet_diagnostic.S6444.severity    = warning    # Not specifying a timeout for regular expressions is security-sensitive
dotnet_diagnostic.S6561.severity    = warning    # Avoid using "DateTime.Now" for benchmarking or timing operations
dotnet_diagnostic.S6562.severity    = warning    # Always set the "DateTimeKind" when creating new "DateTime" instances
dotnet_diagnostic.S6575.severity    = warning    # Use "TimeZoneInfo.FindSystemTimeZoneById" without converting the timezones with "TimezoneConverter"
dotnet_diagnostic.S6580.severity    = warning    # Use a format provider when parsing date and time
dotnet_diagnostic.S6588.severity    = warning    # Use the "UnixEpoch" field instead of creating "DateTime" instances that point to the beginning of the Unix epoch
dotnet_diagnostic.S6602.severity    = warning    # "Find" method should be used instead of the "FirstOrDefault" extension
dotnet_diagnostic.S6603.severity    = warning    # The collection-specific "TrueForAll" method should be used instead of the "All" extension
dotnet_diagnostic.S6605.severity    = warning    # Collection-specific "Exists" method should be used instead of the "Any" extension
dotnet_diagnostic.S6607.severity    = warning    # The collection should be filtered before sorting by using "Where" before "OrderBy"
dotnet_diagnostic.S6609.severity    = warning    # "Min/Max" properties of "Set" types should be used instead of the "Enumerable" extension methods
dotnet_diagnostic.S6610.severity    = warning    # "StartsWith" and "EndsWith" overloads that take a "char" should be used instead of the ones that take a "string"
dotnet_diagnostic.S6612.severity    = warning    # The lambda parameter should be used instead of capturing arguments in "ConcurrentDictionary" methods
dotnet_diagnostic.S6613.severity    = warning    # "First" and "Last" properties of "LinkedList" should be used instead of the "First()" and "Last()" extension methods
dotnet_diagnostic.S6617.severity    = warning    # "Contains" should be used instead of "Any" for simple equality checks
dotnet_diagnostic.S6618.severity    = warning    # "string.Create" should be used instead of "FormattableString"
dotnet_diagnostic.S6640.severity    = warning    # Using unsafe code blocks is security-sensitive
dotnet_diagnostic.S6667.severity    = warning    # Logging in a catch clause should pass the caught exception as a parameter.
dotnet_diagnostic.S6668.severity    = warning    # Logging arguments should be passed to the correct parameter
dotnet_diagnostic.S6670.severity    = warning    # "Trace.Write" and "Trace.WriteLine" should not be used
dotnet_diagnostic.S6672.severity    = warning    # Generic logger injection should match enclosing type
dotnet_diagnostic.S6673.severity    = warning    # Log message template placeholders should be in the right order
dotnet_diagnostic.S6674.severity    = warning    # Log message template should be syntactically correct
dotnet_diagnostic.S6675.severity    = warning    # "Trace.WriteLineIf" should not be used with "TraceSwitch" levels
dotnet_diagnostic.S6677.severity    = warning    # Message template placeholders should be unique
dotnet_diagnostic.S6678.severity    = warning    # Use PascalCase for named placeholders
dotnet_diagnostic.S6781.severity    = warning    # JWT secret keys should not be disclosed
dotnet_diagnostic.S6797.severity    = warning    # Blazor query parameter type should be supported
dotnet_diagnostic.S6798.severity    = warning    # [JSInvokable] attribute should only be used on public methods
dotnet_diagnostic.S6800.severity    = warning    # Component parameter type should match the route parameter type constraint
dotnet_diagnostic.S6930.severity    = warning    # Backslash should be avoided in route templates
dotnet_diagnostic.S6931.severity    = warning    # ASP.NET controller actions should not have a route template starting with "/"
dotnet_diagnostic.S6932.severity    = warning    # Use model binding instead of reading raw request data
dotnet_diagnostic.S6934.severity    = warning    # A Route attribute should be added to the controller when a route template is specified at the action level
dotnet_diagnostic.S6960.severity    = warning    # Controllers should not have mixed responsibilities
dotnet_diagnostic.S6961.severity    = warning    # API Controllers should derive from ControllerBase instead of Controller
dotnet_diagnostic.S6962.severity    = warning    # You should pool HTTP connections with HttpClientFactory
dotnet_diagnostic.S6964.severity    = warning    # Value type property used as input in a controller action should be nullable, required or annotated with the JsonRequiredAttribute to avoid under-posting.
dotnet_diagnostic.S6965.severity    = warning    # REST API actions should be annotated with an HTTP verb attribute
dotnet_diagnostic.S6966.severity    = warning    # Awaitable method should be used
dotnet_diagnostic.S6967.severity    = warning    # ModelState.IsValid should be called in controller actions
dotnet_diagnostic.S6968.severity    = warning    # Actions that return a value should be annotated with ProducesResponseTypeAttribute containing the return type
dotnet_diagnostic.S9999-cpd.severity = warning    # Copy-paste token calculator
dotnet_diagnostic.S9999-log.severity = warning    # Log generator
dotnet_diagnostic.S9999-metadata.severity = warning    # File metadata generator
dotnet_diagnostic.S9999-metrics.severity = warning    # Metrics calculator
dotnet_diagnostic.S9999-symbolRef.severity = warning    # Symbol reference calculator
dotnet_diagnostic.S9999-token-type.severity = warning    # Token type calculator
dotnet_diagnostic.S9999-warning.severity = warning    # Analysis Warning generator

dotnet_diagnostic.SA1109.severity   = none       # Block statements should not contain embedded regions
dotnet_diagnostic.SA1126.severity   = none       # Prefix calls correctly
dotnet_diagnostic.SA1301.severity   = none       # Element should begin with lower-case letter
dotnet_diagnostic.SA1305.severity   = none       # Field names should not use Hungarian notation
dotnet_diagnostic.SA1409.severity   = none       # Remove unnecessary code
dotnet_diagnostic.SA1412.severity   = none       # Store files as UTF-8 with byte order mark
dotnet_diagnostic.SA1603.severity   = none       # Documentation should contain valid XML
dotnet_diagnostic.SA1609.severity   = none       # Property documentation should have value
dotnet_diagnostic.SA1628.severity   = none       # Documentation text should begin with a capital letter
dotnet_diagnostic.SA1630.severity   = none       # Documentation text should contain whitespace
dotnet_diagnostic.SA1631.severity   = none       # Documentation should meet character percentage
dotnet_diagnostic.SA1632.severity   = none       # Documentation text should meet minimum character length
dotnet_diagnostic.SA1639.severity   = none       # File header should have summary
dotnet_diagnostic.SA1644.severity   = none       # Documentation headers should not contain blank lines
dotnet_diagnostic.SA1645.severity   = none       # Included documentation file does not exist
dotnet_diagnostic.SA1646.severity   = none       # Included documentation XPath does not exist
dotnet_diagnostic.SA1647.severity   = none       # Include node does not contain valid file and path
dotnet_diagnostic.SA1650.severity   = none       # Element documentation should be spelled correctly

dotnet_diagnostic.SA1119_p.severity = silent     # Statement should not use unnecessary parenthesis

dotnet_diagnostic.SA0001.severity   = warning    # XML comment analysis disabled
dotnet_diagnostic.SA0002.severity   = warning    # Invalid settings file
dotnet_diagnostic.SA1000.severity   = warning    # Keywords should be spaced correctly
dotnet_diagnostic.SA1002.severity   = warning    # Semicolons should be spaced correctly
dotnet_diagnostic.SA1003.severity   = warning    # Symbols should be spaced correctly
dotnet_diagnostic.SA1004.severity   = warning    # Documentation lines should begin with single space
dotnet_diagnostic.SA1005.severity   = warning    # Single line comments should begin with single space
dotnet_diagnostic.SA1006.severity   = warning    # Preprocessor keywords should not be preceded by space
dotnet_diagnostic.SA1007.severity   = warning    # Operator keyword should be followed by space
dotnet_diagnostic.SA1008.severity   = warning    # Opening parenthesis should be spaced correctly
dotnet_diagnostic.SA1009.severity   = warning    # Closing parenthesis should be spaced correctly
dotnet_diagnostic.SA1010.severity   = warning    # Opening square brackets should be spaced correctly
dotnet_diagnostic.SA1011.severity   = warning    # Closing square brackets should be spaced correctly
dotnet_diagnostic.SA1012.severity   = warning    # Opening braces should be spaced correctly
dotnet_diagnostic.SA1013.severity   = warning    # Closing braces should be spaced correctly
dotnet_diagnostic.SA1014.severity   = warning    # Opening generic brackets should be spaced correctly
dotnet_diagnostic.SA1015.severity   = warning    # Closing generic brackets should be spaced correctly
dotnet_diagnostic.SA1016.severity   = warning    # Opening attribute brackets should be spaced correctly
dotnet_diagnostic.SA1017.severity   = warning    # Closing attribute brackets should be spaced correctly
dotnet_diagnostic.SA1018.severity   = warning    # Nullable type symbols should be spaced correctly
dotnet_diagnostic.SA1019.severity   = warning    # Member access symbols should be spaced correctly
dotnet_diagnostic.SA1020.severity   = warning    # Increment decrement symbols should be spaced correctly
dotnet_diagnostic.SA1021.severity   = warning    # Negative signs should be spaced correctly
dotnet_diagnostic.SA1022.severity   = warning    # Positive signs should be spaced correctly
dotnet_diagnostic.SA1023.severity   = warning    # Dereference and access of symbols should be spaced correctly
dotnet_diagnostic.SA1024.severity   = warning    # Colons Should Be Spaced Correctly
dotnet_diagnostic.SA1025.severity   = warning    # Code should not contain multiple whitespace in a row
dotnet_diagnostic.SA1026.severity   = warning    # Code should not contain space after new or stackalloc keyword in implicitly typed array allocation
dotnet_diagnostic.SA1027.severity   = warning    # Use tabs correctly
dotnet_diagnostic.SA1028.severity   = warning    # Code should not contain trailing whitespace
dotnet_diagnostic.SA1100.severity   = warning    # Do not prefix calls with base unless local implementation exists
dotnet_diagnostic.SA1102.severity   = warning    # Query clause should follow previous clause
dotnet_diagnostic.SA1103.severity   = warning    # Query clauses should be on separate lines or all on one line
dotnet_diagnostic.SA1104.severity   = warning    # Query clause should begin on new line when previous clause spans multiple lines
dotnet_diagnostic.SA1105.severity   = warning    # Query clauses spanning multiple lines should begin on own line
dotnet_diagnostic.SA1108.severity   = warning    # Block statements should not contain embedded comments
dotnet_diagnostic.SA1110.severity   = warning    # Opening parenthesis or bracket should be on declaration line
dotnet_diagnostic.SA1111.severity   = warning    # Closing parenthesis should be on line of last parameter
dotnet_diagnostic.SA1112.severity   = warning    # Closing parenthesis should be on line of opening parenthesis
dotnet_diagnostic.SA1113.severity   = warning    # Comma should be on the same line as previous parameter
dotnet_diagnostic.SA1114.severity   = warning    # Parameter list should follow declaration
dotnet_diagnostic.SA1115.severity   = warning    # Parameter should follow comma
dotnet_diagnostic.SA1116.severity   = warning    # Split parameters should start on line after declaration
dotnet_diagnostic.SA1117.severity   = warning    # Parameters should be on same line or separate lines
dotnet_diagnostic.SA1118.severity   = warning    # Parameter should not span multiple lines
dotnet_diagnostic.SA1119.severity   = warning    # Statement should not use unnecessary parenthesis
dotnet_diagnostic.SA1120.severity   = warning    # Comments should contain text
dotnet_diagnostic.SA1121.severity   = warning    # Use built-in type alias
dotnet_diagnostic.SA1122.severity   = warning    # Use string.Empty for empty strings
dotnet_diagnostic.SA1124.severity   = warning    # Do not use regions
dotnet_diagnostic.SA1125.severity   = warning    # Use shorthand for nullable types
dotnet_diagnostic.SA1129.severity   = warning    # Do not use default value type constructor
dotnet_diagnostic.SA1130.severity   = warning    # Use lambda syntax
dotnet_diagnostic.SA1131.severity   = warning    # Use readable conditions
dotnet_diagnostic.SA1132.severity   = warning    # Do not combine fields
dotnet_diagnostic.SA1133.severity   = warning    # Do not combine attributes
dotnet_diagnostic.SA1134.severity   = warning    # Attributes should not share line
dotnet_diagnostic.SA1135.severity   = warning    # Using directives should be qualified
dotnet_diagnostic.SA1136.severity   = warning    # Enum values should be on separate lines
dotnet_diagnostic.SA1137.severity   = warning    # Elements should have the same indentation
dotnet_diagnostic.SA1139.severity   = warning    # Use literal suffix notation instead of casting
dotnet_diagnostic.SA1205.severity   = warning    # Partial elements should declare access
dotnet_diagnostic.SA1206.severity   = warning    # Declaration keywords should follow order
dotnet_diagnostic.SA1207.severity   = warning    # Protected should come before internal
dotnet_diagnostic.SA1209.severity   = warning    # Using alias directives should be placed after other using directives
dotnet_diagnostic.SA1210.severity   = warning    # Using directives should be ordered alphabetically by namespace
dotnet_diagnostic.SA1211.severity   = warning    # Using alias directives should be ordered alphabetically by alias name
dotnet_diagnostic.SA1212.severity   = warning    # Property accessors should follow order
dotnet_diagnostic.SA1213.severity   = warning    # Event accessors should follow order
dotnet_diagnostic.SA1216.severity   = warning    # Using static directives should be placed at the correct location.
dotnet_diagnostic.SA1217.severity   = warning    # Using static directives should be ordered alphabetically
dotnet_diagnostic.SA1303.severity   = warning    # Const field names should begin with upper-case letter
dotnet_diagnostic.SA1312.severity   = warning    # Variable names should begin with lower-case letter
dotnet_diagnostic.SA1314.severity   = warning    # Type parameter names should begin with T
dotnet_diagnostic.SA1400.severity   = warning    # Access modifier should be declared
dotnet_diagnostic.SA1403.severity   = warning    # File may only contain a single namespace
dotnet_diagnostic.SA1404.severity   = warning    # Code analysis suppression should have justification
dotnet_diagnostic.SA1405.severity   = warning    # Debug.Assert should provide message text
dotnet_diagnostic.SA1406.severity   = warning    # Debug.Fail should provide message text
dotnet_diagnostic.SA1408.severity   = warning    # Conditional expressions should declare precedence
dotnet_diagnostic.SA1410.severity   = warning    # Remove delegate parenthesis when possible
dotnet_diagnostic.SA1411.severity   = warning    # Attribute constructor should not use unnecessary parenthesis
dotnet_diagnostic.SA1413.severity   = warning    # Use trailing comma in multi-line initializers
dotnet_diagnostic.SA1500.severity   = warning    # Braces for multi-line statements should not share line
dotnet_diagnostic.SA1504.severity   = warning    # All accessors should be single-line or multi-line
dotnet_diagnostic.SA1505.severity   = warning    # Opening braces should not be followed by blank line
dotnet_diagnostic.SA1506.severity   = warning    # Element documentation headers should not be followed by blank line
dotnet_diagnostic.SA1507.severity   = warning    # Code should not contain multiple blank lines in a row
dotnet_diagnostic.SA1508.severity   = warning    # Closing braces should not be preceded by blank line
dotnet_diagnostic.SA1509.severity   = warning    # Opening braces should not be preceded by blank line
dotnet_diagnostic.SA1510.severity   = warning    # Chained statement blocks should not be preceded by blank line
dotnet_diagnostic.SA1511.severity   = warning    # While-do footer should not be preceded by blank line
dotnet_diagnostic.SA1514.severity   = warning    # Element documentation header should be preceded by blank line
dotnet_diagnostic.SA1516.severity   = warning    # Elements should be separated by blank line
dotnet_diagnostic.SA1517.severity   = warning    # Code should not contain blank lines at start of file
dotnet_diagnostic.SA1518.severity   = warning    # Use line endings correctly at end of file
dotnet_diagnostic.SA1604.severity   = warning    # Element documentation should have summary
dotnet_diagnostic.SA1605.severity   = warning    # Partial element documentation should have summary
dotnet_diagnostic.SA1606.severity   = warning    # Element documentation should have summary text
dotnet_diagnostic.SA1607.severity   = warning    # Partial element documentation should have summary text
dotnet_diagnostic.SA1608.severity   = warning    # Element documentation should not have default summary
dotnet_diagnostic.SA1610.severity   = warning    # Property documentation should have value text
dotnet_diagnostic.SA1612.severity   = warning    # Element parameter documentation should match element parameters
dotnet_diagnostic.SA1613.severity   = warning    # Element parameter documentation should declare parameter name
dotnet_diagnostic.SA1614.severity   = warning    # Element parameter documentation should have text
dotnet_diagnostic.SA1616.severity   = warning    # Element return value documentation should have text
dotnet_diagnostic.SA1617.severity   = warning    # Void return value should not be documented
dotnet_diagnostic.SA1619.severity   = warning    # Generic type parameters should be documented partial class
dotnet_diagnostic.SA1620.severity   = warning    # Generic type parameter documentation should match type parameters
dotnet_diagnostic.SA1621.severity   = warning    # Generic type parameter documentation should declare parameter name
dotnet_diagnostic.SA1622.severity   = warning    # Generic type parameter documentation should have text
dotnet_diagnostic.SA1624.severity   = warning    # Property summary documentation should omit accessor with restricted access
dotnet_diagnostic.SA1625.severity   = warning    # Element documentation should not be copied and pasted
dotnet_diagnostic.SA1626.severity   = warning    # Single-line comments should not use documentation style slashes
dotnet_diagnostic.SA1627.severity   = warning    # Documentation text should not be empty
dotnet_diagnostic.SA1629.severity   = warning    # Documentation text should end with a period
dotnet_diagnostic.SA1634.severity   = warning    # File header should show copyright
dotnet_diagnostic.SA1635.severity   = warning    # File header should have copyright text
dotnet_diagnostic.SA1638.severity   = warning    # File header file name documentation should match file name
dotnet_diagnostic.SA1641.severity   = warning    # File header company name text should match
dotnet_diagnostic.SA1642.severity   = warning    # Constructor summary documentation should begin with standard text
dotnet_diagnostic.SA1643.severity   = warning    # Destructor summary documentation should begin with standard text
dotnet_diagnostic.SA1648.severity   = warning    # inheritdoc should be used with inheriting class
dotnet_diagnostic.SA1651.severity   = warning    # Do not use placeholder elements

dotnet_diagnostic.SX1309.severity   = none       # Field names should begin with underscore
dotnet_diagnostic.SX1309S.severity  = none       # Static field names should begin with underscore

dotnet_diagnostic.SyntaxTreeCacheAnalyzer.severity = silent     # Controls caching of for example semantic models for syntax trees
